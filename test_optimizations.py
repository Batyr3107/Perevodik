#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
import time
import asyncio
sys.path.append('tools')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á
os.environ['DEEPL_API_KEY'] = '174cabf4-06f5-4f88-90a6-be7add90275a:fx'

from tools.async_deepl_translator import AsyncDeepLTranslator
from tools.optimized_context_manager import OptimizedTranslationMemoryManager
from tools.performance_monitor import PerformanceMonitor
from tools.performance_optimizer import PerformanceOptimizer

def test_batch_size_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–µ–π"""
    print("üß™ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –†–ê–ó–ú–ï–†–ê –ë–ê–¢–ß–ï–ô")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_texts = [
        "Hello, world!",
        "This is a test sentence.",
        "How are you today?",
        "I love programming in Python.",
        "The weather is beautiful today.",
        "Machine learning is fascinating.",
        "Translation systems are complex.",
        "Performance optimization is important.",
        "Code quality matters a lot.",
        "Testing is essential for reliability."
    ] * 5  # 50 —Ç–µ–∫—Å—Ç–æ–≤
    
    optimizer = PerformanceOptimizer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–µ–π
    batch_sizes = [5, 10, 25, 50]
    
    for batch_size in batch_sizes:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞: {batch_size}")
        
        start_time = time.time()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞)
        def mock_translate(batch):
            time.sleep(0.1)  # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è API
            return [f"Translated: {text}" for text in batch]
        
        results = optimizer.optimize_translation_batch(
            test_texts, mock_translate, batch_size
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f}—Å")
        print(f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {len(test_texts)/duration:.1f} —Ç–µ–∫—Å—Ç–æ–≤/—Å–µ–∫")
        print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")

async def test_async_translator():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
    print("\nüß™ –¢–ï–°–¢ –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –ü–ï–†–ï–í–û–î–ß–ò–ö–ê")
    print("=" * 50)
    
    translator = AsyncDeepLTranslator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_texts = [
        "Hello, world!",
        "This is a test.",
        "How are you?",
        "I love Python.",
        "Machine learning is great."
    ]
    
    print("üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥...")
    start_time = time.time()
    
    results = await translator.translate_batch_async(test_texts, batch_size=3)
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f}—Å")
    
    for i, result in enumerate(results):
        if result.success:
            print(f"   {i+1}. {test_texts[i]} ‚Üí {result.text}")
        else:
            print(f"   {i+1}. –û—à–∏–±–∫–∞: {result.error_message}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = translator.get_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {stats['total_translations']}")
    print(f"   ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à: {stats['cache_hit_rate']:.2%}")
    print(f"   ‚Ä¢ API –≤—ã–∑–æ–≤–æ–≤: {stats['api_calls']}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_time_per_translation']:.3f}—Å")

def test_optimized_context_manager():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print("\nüß™ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê –ö–û–ù–¢–ï–ö–°–¢–ê")
    print("=" * 50)
    
    manager = OptimizedTranslationMemoryManager()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏...")
    
    test_terms = ["cultivation", "spiritual energy", "realm", "technique", "martial arts"]
    
    start_time = time.time()
    for term in test_terms:
        result = manager.get_glossary_term(term)
        print(f"   ‚Ä¢ {term} ‚Üí {result}")
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"‚úÖ –ü–æ–∏—Å–∫ –≤ –≥–ª–æ—Å—Å–∞—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.3f}—Å")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ñ—Ä–∞–∑
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∞–∑...")
    
    test_phrases = ["Hello world", "How are you", "Thank you", "Good morning", "See you later"]
    
    start_time = time.time()
    for phrase in test_phrases:
        result = manager.get_phrase_translation(phrase, "–ì–ª–∞–≤–∞ 1")
        print(f"   ‚Ä¢ {phrase} ‚Üí {result}")
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"‚úÖ –ü–æ–∏—Å–∫ —Ñ—Ä–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.3f}—Å")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = manager.get_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
    print(f"   ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à: {stats['cache_hit_rate']:.2%}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {stats['avg_query_time']:.4f}—Å")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –≥–ª–æ—Å—Å–∞—Ä–∏—è: {stats['glossary_cache_size']}")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞ —Ñ—Ä–∞–∑: {stats['phrase_cache_size']}")

def test_performance_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    monitor = PerformanceMonitor()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
    print("üîÑ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
    
    for i in range(5):
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
        monitor.record_translation_metrics(
            translations=100 + i * 20,
            cache_hits=80 + i * 15,
            api_calls=20 + i * 5,
            processing_time=2.0 + i * 0.5,
            quality_score=95.0 + i * 0.5
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        monitor.record_metric("cpu_usage", 50 + i * 5, "percent", "system")
        monitor.record_metric("memory_usage", 100 + i * 10, "MB", "system")
        monitor.record_metric("translation_speed", 1000 + i * 100, "items/sec", "performance")
        
        time.sleep(1)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    monitor.print_summary()
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüìä –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫...")
    monitor.export_metrics_csv("test_metrics.csv")
    monitor.export_system_metrics_csv("test_system_metrics.csv")
    monitor.export_translation_metrics_csv("test_translation_metrics.csv")
    monitor.save_metrics_json("test_all_metrics.json")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.stop_monitoring()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç—á–µ–π
        test_batch_size_optimization()
        
        # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        await test_async_translator()
        
        # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        test_optimized_context_manager()
        
        # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        test_performance_monitoring()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
