#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
"""

import logging
import traceback
import sys
from typing import Dict, Any, Optional, Callable, List
from dataclasses import dataclass
from datetime import datetime
from enum import Enum

class ErrorSeverity(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class ErrorCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—à–∏–±–æ–∫"""
    API_ERROR = "api_error"
    FILE_ERROR = "file_error"
    TRANSLATION_ERROR = "translation_error"
    VALIDATION_ERROR = "validation_error"
    CONFIG_ERROR = "config_error"
    MEMORY_ERROR = "memory_error"
    NETWORK_ERROR = "network_error"
    UNKNOWN = "unknown"

@dataclass
class ErrorInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    error_type: str
    category: ErrorCategory
    severity: ErrorSeverity
    message: str
    details: Optional[Dict[str, Any]] = None
    timestamp: str = None
    traceback: Optional[str] = None
    context: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()

class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    
    def __init__(self, log_file: str = "translation_errors.log"):
        self.log_file = log_file
        self.error_count = 0
        self.error_history = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.error_handlers = {
            ErrorCategory.API_ERROR: self._handle_api_error,
            ErrorCategory.FILE_ERROR: self._handle_file_error,
            ErrorCategory.TRANSLATION_ERROR: self._handle_translation_error,
            ErrorCategory.VALIDATION_ERROR: self._handle_validation_error,
            ErrorCategory.CONFIG_ERROR: self._handle_config_error,
            ErrorCategory.MEMORY_ERROR: self._handle_memory_error,
            ErrorCategory.NETWORK_ERROR: self._handle_network_error,
            ErrorCategory.UNKNOWN: self._handle_unknown_error
        }
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.log_file, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger('TranslationSystem')
    
    def handle_error(self, error: Exception, category: ErrorCategory, 
                    context: Optional[Dict[str, Any]] = None,
                    severity: ErrorSeverity = ErrorSeverity.MEDIUM) -> ErrorInfo:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.error_count += 1
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        error_info = ErrorInfo(
            error_type=type(error).__name__,
            category=category,
            severity=severity,
            message=str(error),
            details=self._extract_error_details(error),
            traceback=traceback.format_exc(),
            context=context
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.error_history.append(error_info)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        self._log_error(error_info)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if category in self.error_handlers:
            self.error_handlers[category](error_info)
        
        return error_info
    
    def _extract_error_details(self, error: Exception) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"""
        details = {
            "error_type": type(error).__name__,
            "error_message": str(error)
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if hasattr(error, 'response'):
            details["response_status"] = getattr(error.response, 'status_code', None)
            details["response_text"] = getattr(error.response, 'text', None)
        
        if hasattr(error, 'filename'):
            details["filename"] = error.filename
        
        if hasattr(error, 'errno'):
            details["errno"] = error.errno
        
        return details
    
    def _log_error(self, error_info: ErrorInfo):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É"""
        log_level = {
            ErrorSeverity.LOW: logging.INFO,
            ErrorSeverity.MEDIUM: logging.WARNING,
            ErrorSeverity.HIGH: logging.ERROR,
            ErrorSeverity.CRITICAL: logging.CRITICAL
        }.get(error_info.severity, logging.ERROR)
        
        self.logger.log(
            log_level,
            f"[{error_info.category.value}] {error_info.message}",
            extra={
                'error_type': error_info.error_type,
                'context': error_info.context,
                'traceback': error_info.traceback
            }
        )
    
    def _handle_api_error(self, error_info: ErrorInfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API"""
        if error_info.severity == ErrorSeverity.CRITICAL:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê API - —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        elif error_info.severity == ErrorSeverity.HIGH:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ API - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∫–ª—é—á–∏")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        suggestions = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á DeepL",
            "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã API"
        ]
        self._print_suggestions(suggestions)
    
    def _handle_file_error(self, error_info: ErrorInfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        if error_info.severity == ErrorSeverity.CRITICAL:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –§–ê–ô–õ–ê - —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        elif error_info.severity == ErrorSeverity.HIGH:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        
        suggestions = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞",
            "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ (UTF-8)"
        ]
        self._print_suggestions(suggestions)
    
    def _handle_translation_error(self, error_info: ErrorInfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        if error_info.severity == ErrorSeverity.CRITICAL:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–ï–†–ï–í–û–î–ê - –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
        elif error_info.severity == ErrorSeverity.HIGH:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞")
        
        suggestions = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
            "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ–Ω—å—à–∏–µ —á–∞—Å—Ç–∏"
        ]
        self._print_suggestions(suggestions)
    
    def _handle_validation_error(self, error_info: ErrorInfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if error_info.severity == ErrorSeverity.CRITICAL:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò - –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ")
        elif error_info.severity == ErrorSeverity.HIGH:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        suggestions = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–∞",
            "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ö–∞–∏–∑–º—ã –∏ –∫–∞–ª—å–∫–∏",
            "–£–ª—É—á—à–∏—Ç–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞"
        ]
        self._print_suggestions(suggestions)
    
    def _handle_config_error(self, error_info: ErrorInfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if error_info.severity == ErrorSeverity.CRITICAL:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò - —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        elif error_info.severity == ErrorSeverity.HIGH:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        suggestions = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.py",
            "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º"
        ]
        self._print_suggestions(suggestions)
    
    def _handle_memory_error(self, error_info: ErrorInfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        if error_info.severity == ErrorSeverity.CRITICAL:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–ê–ú–Ø–¢–ò - –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω")
        elif error_info.severity == ErrorSeverity.HIGH:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏ - –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º")
        
        suggestions = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ChromaDB",
            "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
        ]
        self._print_suggestions(suggestions)
    
    def _handle_network_error(self, error_info: ErrorInfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        if error_info.severity == ErrorSeverity.CRITICAL:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        elif error_info.severity == ErrorSeverity.HIGH:
            print("‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        suggestions = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
            "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–æ–≤",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        ]
        self._print_suggestions(suggestions)
    
    def _handle_unknown_error(self, error_info: ErrorInfo):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑")
        
        suggestions = [
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π",
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
        ]
        self._print_suggestions(suggestions)
    
    def _print_suggestions(self, suggestions: List[str]):
        """–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        print("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
        for i, suggestion in enumerate(suggestions, 1):
            print(f"   {i}. {suggestion}")
    
    def get_error_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫"""
        if not self.error_history:
            return {"total_errors": 0}
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_counts = {}
        severity_counts = {}
        
        for error in self.error_history:
            category = error.category.value
            severity = error.severity.value
            
            category_counts[category] = category_counts.get(category, 0) + 1
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        return {
            "total_errors": len(self.error_history),
            "category_counts": category_counts,
            "severity_counts": severity_counts,
            "recent_errors": self.error_history[-5:] if len(self.error_history) > 5 else self.error_history
        }
    
    def print_error_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö"""
        stats = self.get_error_statistics()
        
        print("\nüìä –û–¢–ß–ï–¢ –û–ë –û–®–ò–ë–ö–ê–•")
        print("=" * 40)
        print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}")
        
        if stats['total_errors'] > 0:
            print("\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in stats['category_counts'].items():
                print(f"  ‚Ä¢ {category}: {count}")
            
            print("\n–ü–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏:")
            for severity, count in stats['severity_counts'].items():
                print(f"  ‚Ä¢ {severity}: {count}")
            
            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
            for error in stats['recent_errors']:
                print(f"  ‚Ä¢ [{error.category.value}] {error.message[:50]}...")
    
    def clear_error_history(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫"""
        self.error_history.clear()
        self.error_count = 0
        print("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫ –æ—á–∏—â–µ–Ω–∞")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_errors(category: ErrorCategory, severity: ErrorSeverity = ErrorSeverity.MEDIUM):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    def decorator(func: Callable) -> Callable:
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                error_handler = getattr(args[0], 'error_handler', None) if args else None
                if error_handler is None:
                    error_handler = ErrorHandler()
                
                context = {
                    'function': func.__name__,
                    'args': str(args)[:100],
                    'kwargs': str(kwargs)[:100]
                }
                
                error_info = error_handler.handle_error(e, category, context, severity)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                if func.__name__.startswith('get_') or func.__name__.startswith('find_'):
                    return None
                elif func.__name__.startswith('is_') or func.__name__.startswith('has_'):
                    return False
                else:
                    return []
        
        return wrapper
    return decorator

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
global_error_handler = ErrorHandler()

def handle_global_error(error: Exception, category: ErrorCategory, 
                       context: Optional[Dict[str, Any]] = None,
                       severity: ErrorSeverity = ErrorSeverity.MEDIUM) -> ErrorInfo:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    return global_error_handler.handle_error(error, category, context, severity)

def test_error_handler():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –û–®–ò–ë–û–ö")
    print("=" * 50)
    
    error_handler = ErrorHandler()
    
    # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    try:
        raise FileNotFoundError("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        error_handler.handle_error(e, ErrorCategory.FILE_ERROR, {"file": "test.txt"})
    
    try:
        raise ConnectionError("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
    except Exception as e:
        error_handler.handle_error(e, ErrorCategory.API_ERROR, {"api": "DeepL"}, ErrorSeverity.HIGH)
    
    try:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    except Exception as e:
        error_handler.handle_error(e, ErrorCategory.VALIDATION_ERROR, {"field": "quality_score"})
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    error_handler.print_error_report()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_error_handler()
