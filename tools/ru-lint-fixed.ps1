# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—Ä—Ö–∞–∏–∑–º—ã, –∫–∞–ª—å–∫–∏, –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å

param(
    [Parameter(Mandatory=$true)]
    [string]$FilePath,
    
    [Parameter(Mandatory=$false)]
    [switch]$Fix = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$Verbose = $false
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Cyan = "Cyan"

# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∞—Ä—Ö–∞–∏–∑–º—ã
$BannedArchaisms = @(
    "—Å–µ–π", "—Å–∏—è", "–æ–Ω—ã–π", "–¥–∞–±—ã", "–∏–±–æ", 
    "–≤–æ–∏—Å—Ç–∏–Ω—É", "–≤–µ—Å—å–º–∞", "–æ—Ç–Ω—é–¥—å", "–Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ",
    "–º–æ–ª–≤–∏—Ç—å", "–≤–æ–∑–∑—Ä–µ—Ç—å", "–≤–æ–ø—Ä–æ—à–∞—Ç—å", "–Ω—ã–Ω–µ",
    "–æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ", "–∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ"
)

# –ö–∞–ª—å–∫–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º—ã
$Calques = @{
    "–∫—Ä–∞–π–Ω–µ" = "–æ—á–µ–Ω—å"
    "—Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞" = "–Ω–∞–ø—Ä–∞–≤–æ –∏ –Ω–∞–ª–µ–≤–æ"
    "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞" = "–∏–¥–µ–∞–ª—å–Ω–∞"
    "–ù–∞ –µ–≥–æ –≤–∑–≥–ª—è–¥" = "–° –µ–≥–æ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è"
    "—Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–ª" = "—Ä–∞–∑–º—ã—à–ª—è–ª"
    "–æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å" = "–¥–µ–ª–∞—Ç—å"
    "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ" = "–≤–ø–µ—á–∞—Ç–ª—è—Ç—å"
    "–∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ" = "—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å"
}

# –§–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
$FormalDialogue = @{
    "–Ø —Å–æ–±–∏—Ä–∞—é—Å—å" = "–ë—É–¥—É"
    "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ" = "–î–∞–π –º–Ω–µ"
    "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã" = "–ú–æ–∂–µ—à—å"
    "–Ø —Ö–æ—Ç–µ–ª –±—ã" = "–•–æ—á—É"
    "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ" = "–ü–æ—Ö–æ–∂–µ"
    "–Ø –±–æ—é—Å—å, —á—Ç–æ" = "–ë–æ—é—Å—å"
    "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –≤—ã—Ä–∞–∑–∏—Ç—å" = "–°–ø–∞—Å–∏–±–æ"
    "–ù–µ —Å–æ–±–ª–∞–≥–æ–≤–æ–ª–∏—Ç–µ –ª–∏ –≤—ã" = "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã"
    "–û—Å–º–µ–ª—é—Å—å —Å–ø—Ä–æ—Å–∏—Ç—å" = "–ú–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å?"
    "–°–∏–µ –¥–µ—è–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ" = "–¢–∞–∫ –Ω–µ–ª—å–∑—è"
    "–í–æ–∏—Å—Ç–∏–Ω—É –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π" = "–†–µ–∞–ª—å–Ω–æ –º–æ—â–Ω—ã–π"
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
$MaxSentenceLength = 15

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

function Test-FileExists {
    param([string]$Path)
    if (-not (Test-Path $Path)) {
        Write-ColorOutput "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $Path" $Red
        exit 1
    }
}

function Get-TextContent {
    param([string]$FilePath)
    try {
        $content = Get-Content -Path $FilePath -Encoding UTF8 -Raw
        return $content
    }
    catch {
        Write-ColorOutput "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: $($_.Exception.Message)" $Red
        exit 1
    }
}

function Test-Archaisms {
    param([string]$Text, [string]$FilePath)
    
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∞–∏–∑–º–æ–≤..." $Cyan
    $issues = @()
    
    foreach ($archaism in $BannedArchaisms) {
        if ($Text -match $archaism) {
            $matches = [regex]::Matches($Text, $archaism, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
            foreach ($match in $matches) {
                $lineNumber = ($Text.Substring(0, $match.Index) -split "`n").Count
                $context = $Text.Substring([Math]::Max(0, $match.Index - 30), 60)
                
                $issues += @{
                    Type = "–ê—Ä—Ö–∞–∏–∑–º"
                    Word = $archaism
                    Line = $lineNumber
                    Context = $context
                    Severity = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"
                }
            }
        }
    }
    
    return $issues
}

function Test-Calques {
    param([string]$Text, [string]$FilePath)
    
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª—å–∫–∏..." $Cyan
    $issues = @()
    
    foreach ($calque in $Calques.Keys) {
        if ($calque in $Text) {
            $matches = [regex]::Matches($Text, $calque, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
            foreach ($match in $matches) {
                $lineNumber = ($Text.Substring(0, $match.Index) -split "`n").Count
                $context = $Text.Substring([Math]::Max(0, $match.Index - 30), 60)
                
                $issues += @{
                    Type = "–ö–∞–ª—å–∫–∞"
                    Word = $calque
                    Suggestion = $Calques[$calque]
                    Line = $lineNumber
                    Context = $context
                    Severity = "–í—ã—Å–æ–∫–∞—è"
                }
            }
        }
    }
    
    return $issues
}

function Test-FormalDialogue {
    param([string]$Text, [string]$FilePath)
    
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤..." $Cyan
    $issues = @()
    
    foreach ($formal in $FormalDialogue.Keys) {
        if ($formal in $Text) {
            $matches = [regex]::Matches($Text, $formal, [System.Text.RegularExpressions.RegexOptions]::IgnoreCase)
            foreach ($match in $matches) {
                $lineNumber = ($Text.Substring(0, $match.Index) -split "`n").Count
                $context = $Text.Substring([Math]::Max(0, $match.Index - 30), 60)
                
                $issues += @{
                    Type = "–§–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥"
                    Word = $formal
                    Suggestion = $FormalDialogue[$formal]
                    Line = $lineNumber
                    Context = $context
                    Severity = "–°—Ä–µ–¥–Ω—è—è"
                }
            }
        }
    }
    
    return $issues
}

function Test-SentenceLength {
    param([string]$Text, [string]$FilePath)
    
    Write-ColorOutput "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π..." $Cyan
    $issues = @()
    
    $sentences = $Text -split '[.!?]+'
    $lineNumber = 1
    
    foreach ($sentence in $sentences) {
        $sentence = $sentence.Trim()
        if ($sentence.Length -gt 0) {
            $words = $sentence -split '\s+' | Where-Object { $_.Length -gt 0 }
            if ($words.Count -gt $MaxSentenceLength) {
                $issues += @{
                    Type = "–î–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
                    Word = $sentence
                    Line = $lineNumber
                    WordCount = $words.Count
                    MaxAllowed = $MaxSentenceLength
                    Severity = "–°—Ä–µ–¥–Ω—è—è"
                }
            }
        }
        $lineNumber++
    }
    
    return $issues
}

function Test-Readability {
    param([string]$Text, [string]$FilePath)
    
    Write-ColorOutput "üîç –ê–Ω–∞–ª–∏–∑ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏..." $Cyan
    
    $sentences = ($Text -split '[.!?]+' | Where-Object { $_.Trim().Length -gt 0 }).Count
    $words = ($Text -split '\s+' | Where-Object { $_.Length -gt 0 }).Count
    $syllables = 0
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç —Å–ª–æ–≥–æ–≤ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
    $words | ForEach-Object {
        $word = $_ -replace '[^\p{L}]', ''
        if ($word.Length -gt 0) {
            $syllables += [Math]::Max(1, $word.Length / 2)
        }
    }
    
    # –§–æ—Ä–º—É–ª–∞ –§–ª–µ—à–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    $avgWordsPerSentence = if ($sentences -gt 0) { $words / $sentences } else { 0 }
    $avgSyllablesPerWord = if ($words -gt 0) { $syllables / $words } else { 0 }
    
    $readabilityScore = 206.835 - (1.3 * $avgWordsPerSentence) - (60.1 * $avgSyllablesPerWord)
    $readabilityScore = [Math]::Max(0, [Math]::Min(100, $readabilityScore))
    
    return @{
        Score = [Math]::Round($readabilityScore, 1)
        AvgWordsPerSentence = [Math]::Round($avgWordsPerSentence, 1)
        AvgSyllablesPerWord = [Math]::Round($avgSyllablesPerWord, 2)
        TotalWords = $words
        TotalSentences = $sentences
        Target = 85
        Status = if ($readabilityScore -ge 85) { "–•–æ—Ä–æ—à–æ" } elseif ($readabilityScore -ge 70) { "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" } else { "–ü–ª–æ—Ö–æ" }
    }
}

function Show-Issues {
    param([array]$Issues, [string]$FilePath)
    
    if ($Issues.Count -eq 0) {
        Write-ColorOutput "‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!" $Green
        return
    }
    
    Write-ColorOutput "`nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:" $Yellow
    Write-ColorOutput "=" * 60 $Yellow
    
    $groupedIssues = $Issues | Group-Object Type
    foreach ($group in $groupedIssues) {
        Write-ColorOutput "`nüî∏ $($group.Name) ($($group.Count) –ø—Ä–æ–±–ª–µ–º):" $Cyan
        
        foreach ($issue in $group.Group) {
            $severityColor = switch ($issue.Severity) {
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è" { $Red }
                "–í—ã—Å–æ–∫–∞—è" { "Magenta" }
                "–°—Ä–µ–¥–Ω—è—è" { $Yellow }
                default { "White" }
            }
            
            Write-ColorOutput "  –°—Ç—Ä–æ–∫–∞ $($issue.Line): $($issue.Word)" $severityColor
            Write-ColorOutput "  –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...$($issue.Context)..." "Gray"
            
            if ($issue.Suggestion) {
                Write-ColorOutput "  üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: $($issue.Suggestion)" $Green
            }
            if ($issue.WordCount) {
                Write-ColorOutput "  üìä –°–ª–æ–≤: $($issue.WordCount) (–º–∞–∫—Å–∏–º—É–º: $($issue.MaxAllowed))" "Gray"
            }
            Write-ColorOutput ""
        }
    }
}

function Show-ReadabilityReport {
    param([hashtable]$Readability)
    
    Write-ColorOutput "`nüìä –û–¢–ß–ï–¢ –ü–û –ß–ò–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò:" $Cyan
    Write-ColorOutput "=" * 40 $Cyan
    
    $statusColor = switch ($Readability.Status) {
        "–•–æ—Ä–æ—à–æ" { $Green }
        "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" { $Yellow }
        "–ü–ª–æ—Ö–æ" { $Red }
    }
    
    Write-ColorOutput "–û—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏: $($Readability.Score)/100 ($($Readability.Status))" $statusColor
    Write-ColorOutput "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: $($Readability.AvgWordsPerSentence) —Å–ª–æ–≤" "White"
    Write-ColorOutput "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≥–æ–≤ –Ω–∞ —Å–ª–æ–≤–æ: $($Readability.AvgSyllablesPerWord)" "White"
    Write-ColorOutput "–í—Å–µ–≥–æ —Å–ª–æ–≤: $($Readability.TotalWords)" "White"
    Write-ColorOutput "–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: $($Readability.TotalSentences)" "White"
    Write-ColorOutput "–¶–µ–ª–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: $($Readability.Target)+" "Gray"
}

function Fix-Issues {
    param([string]$Text, [array]$Issues)
    
    Write-ColorOutput "`nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú..." $Yellow
    
    $fixedText = $Text
    
    foreach ($issue in $Issues) {
        if ($issue.Suggestion) {
            $pattern = [regex]::Escape($issue.Word)
            $fixedText = $fixedText -replace $pattern, $issue.Suggestion
            Write-ColorOutput "  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: '$($issue.Word)' ‚Üí '$($issue.Suggestion)'" $Green
        }
    }
    
    return $fixedText
}

function Save-FixedFile {
    param([string]$Text, [string]$FilePath)
    
    $backupPath = $FilePath + ".backup"
    $fixedPath = $FilePath -replace '\.txt$', '-fixed.txt'
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    Copy-Item $FilePath $backupPath
    Write-ColorOutput "üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backupPath" $Cyan
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    $Text | Out-File -FilePath $fixedPath -Encoding UTF8
    Write-ColorOutput "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: $fixedPath" $Green
}

# ============= –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê =============

Write-ColorOutput "üîç –†–£–°–°–ö–ò–ô –õ–ò–ù–¢–ï–† –î–õ–Ø –ü–ï–†–ï–í–û–î–û–í" $Cyan
Write-ColorOutput "=" * 50 $Cyan

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
Test-FileExists $FilePath

# –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
$content = Get-TextContent $FilePath

Write-ColorOutput "üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: $FilePath" $Cyan
Write-ColorOutput "üìè –†–∞–∑–º–µ—Ä: $($content.Length) —Å–∏–º–≤–æ–ª–æ–≤" "Gray"

# –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
$allIssues = @()

$archaismIssues = Test-Archaisms $content $FilePath
$allIssues += $archaismIssues

$calqueIssues = Test-Calques $content $FilePath
$allIssues += $calqueIssues

$dialogueIssues = Test-FormalDialogue $content $FilePath
$allIssues += $dialogueIssues

$lengthIssues = Test-SentenceLength $content $FilePath
$allIssues += $lengthIssues

# –ê–Ω–∞–ª–∏–∑ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
$readability = Test-Readability $content $FilePath

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
Show-Issues $allIssues $FilePath
Show-ReadabilityReport $readability

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
$criticalCount = ($allIssues | Where-Object { $_.Severity -eq "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è" }).Count
$highCount = ($allIssues | Where-Object { $_.Severity -eq "–í—ã—Å–æ–∫–∞—è" }).Count
$mediumCount = ($allIssues | Where-Object { $_.Severity -eq "–°—Ä–µ–¥–Ω—è—è" }).Count

Write-ColorOutput "`nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:" $Cyan
Write-ColorOutput "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: $criticalCount" $(if ($criticalCount -gt 0) { $Red } else { $Green })
Write-ColorOutput "–í—ã—Å–æ–∫–∏–µ: $highCount" $(if ($highCount -gt 0) { "Magenta" } else { $Green })
Write-ColorOutput "–°—Ä–µ–¥–Ω–∏–µ: $mediumCount" $(if ($mediumCount -gt 0) { $Yellow } else { $Green })
Write-ColorOutput "–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: $($allIssues.Count)" "White"

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
if ($Fix) {
    $fixableIssues = $allIssues | Where-Object { $_.Suggestion }
    if ($fixableIssues.Count -gt 0) {
        $fixedContent = Fix-Issues $content $fixableIssues
        Save-FixedFile $fixedContent $FilePath
    } else {
        Write-ColorOutput "`n‚ö†Ô∏è –ù–µ—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º" $Yellow
    }
}

# –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
$totalScore = 100
$totalScore -= $criticalCount * 20
$totalScore -= $highCount * 10
$totalScore -= $mediumCount * 5
$totalScore = [Math]::Max(0, $totalScore)

$scoreColor = if ($totalScore -ge 90) { $Green } elseif ($totalScore -ge 70) { $Yellow } else { $Red }

Write-ColorOutput "`nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: $totalScore/100" $scoreColor

if ($totalScore -ge 90) {
    Write-ColorOutput "üéâ –û—Ç–ª–∏—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥! –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!" $Green
} elseif ($totalScore -ge 70) {
    Write-ColorOutput "üëç –•–æ—Ä–æ—à–∏–π –ø–µ—Ä–µ–≤–æ–¥, –Ω–æ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å" $Yellow
} else {
    Write-ColorOutput "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞" $Red
}

Write-ColorOutput "`nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Fix –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è" "Gray"
Write-ColorOutput "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Verbose –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞" "Gray"
