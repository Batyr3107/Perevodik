#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å DeepL
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
"""

import sys
import os
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import get_api_key, MAX_CONSULTATION_FRAGMENTS, API_TIMEOUT
from tools.translation_workflow import ChapterTranslationManager


class DeepLConsultationBase:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å DeepL API"""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á DeepL (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        """
        self.api_key = api_key or get_api_key()
        if not self.api_key:
            raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.py")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        try:
            self.manager = ChapterTranslationManager()
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {e}")
    
    def consult_fragments(self, fragments: List[str]) -> List[str]:
        """
        –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å DeepL –ø–æ —Å–ø–∏—Å–∫—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        
        Args:
            fragments: –°–ø–∏—Å–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ—Ç DeepL
        """
        if not fragments:
            return []
        
        if len(fragments) > MAX_CONSULTATION_FRAGMENTS:
            print(f"‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ ({len(fragments)}). –ú–∞–∫—Å–∏–º—É–º: {MAX_CONSULTATION_FRAGMENTS}")
            fragments = fragments[:MAX_CONSULTATION_FRAGMENTS]
        
        try:
            print(f"ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å DeepL –ø–æ {len(fragments)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º...")
            return self.manager.translate_fragments_deepl(fragments)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å DeepL: {e}")
            return []
    
    def print_comparison(self, fragments: List[str], alternatives: List[str], 
                        my_translations: Optional[List[str]] = None) -> None:
        """
        –í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        
        Args:
            fragments: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
            alternatives: –ü–µ—Ä–µ–≤–æ–¥—ã –æ—Ç DeepL
            my_translations: –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        print("\n" + "="*60)
        print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ï–í–û–î–û–í")
        print("="*60)
        
        for i, (fragment, alt) in enumerate(zip(fragments, alternatives)):
            print(f"\n{i+1}. üá¨üáß –û—Ä–∏–≥–∏–Ω–∞–ª:")
            print(f"   {fragment}")
            
            if my_translations and i < len(my_translations):
                print(f"\n   üë§ –ú–æ–π –ø–µ—Ä–µ–≤–æ–¥:")
                print(f"   {my_translations[i]}")
            
            print(f"\n   ü§ñ DeepL –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:")
            print(f"   {alt}")
            
            if i < len(fragments) - 1:
                print("-" * 40)
    
    def consult_and_compare(self, fragments: List[str], 
                           my_translations: Optional[List[str]] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –≤—ã–≤–æ–¥–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Args:
            fragments: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
            my_translations: –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        print(f"üîç –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø –ü–û {len(fragments)} –§–†–ê–ì–ú–ï–ù–¢–ê–ú")
        print("="*50)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç DeepL
        deepl_translations = self.consult_fragments(fragments)
        
        if not deepl_translations:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç DeepL")
            return {
                'success': False,
                'fragments': fragments,
                'my_translations': my_translations,
                'deepl_translations': [],
                'recommendations': []
            }
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        self.print_comparison(fragments, deepl_translations, my_translations)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._analyze_recommendations(fragments, my_translations, deepl_translations)
        
        return {
            'success': True,
            'fragments': fragments,
            'my_translations': my_translations,
            'deepl_translations': deepl_translations,
            'recommendations': recommendations
        }
    
    def _analyze_recommendations(self, fragments: List[str], 
                                my_translations: Optional[List[str]], 
                                deepl_translations: List[str]) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–µ—Ä–µ–≤–æ–¥–∞–º
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        """
        recommendations = []
        
        for i, (fragment, deepl_translation) in enumerate(zip(fragments, deepl_translations)):
            rec = {
                'index': i,
                'fragment': fragment,
                'deepl_translation': deepl_translation,
                'recommendation': 'use_deepl',
                'confidence': 0.8,
                'reason': 'DeepL –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
            }
            
            if my_translations and i < len(my_translations):
                my_translation = my_translations[i]
                rec['my_translation'] = my_translation
                
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                if len(deepl_translation) > len(my_translation) * 1.5:
                    rec['recommendation'] = 'use_mine'
                    rec['reason'] = '–ú–æ–π –ø–µ—Ä–µ–≤–æ–¥ –±–æ–ª–µ–µ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π'
                elif '–Ω–µ' in my_translation and '–Ω–µ' not in deepl_translation:
                    rec['recommendation'] = 'use_mine'
                    rec['reason'] = '–ú–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ'
            
            recommendations.append(rec)
        
        return recommendations
    
    def print_recommendations(self, recommendations: List[Dict[str, Any]]) -> None:
        """–í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–µ—Ä–µ–≤–æ–¥–∞–º"""
        print("\n" + "="*60)
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("="*60)
        
        for rec in recommendations:
            print(f"\n{rec['index']+1}. {rec['fragment'][:50]}...")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {rec['recommendation']}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {rec['reason']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec['confidence']:.1%}")


class QuickConsultant:
    """–ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.base_consultant = DeepLConsultationBase()
    
    def quick_consult(self, fragment: str, my_translation: str) -> Dict[str, Any]:
        """
        –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –æ–¥–Ω–æ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
        
        Args:
            fragment: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
            my_translation: –ú–æ–π –ø–µ—Ä–µ–≤–æ–¥
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        print(f"‚ö° –ë–´–°–¢–†–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø")
        print(f"üá¨üáß {fragment}")
        print(f"üë§ {my_translation}")
        
        result = self.base_consultant.consult_and_compare([fragment], [my_translation])
        
        if result['success'] and result['deepl_translations']:
            deepl_translation = result['deepl_translations'][0]
            print(f"ü§ñ {deepl_translation}")
            
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            if len(deepl_translation) < len(my_translation) * 0.8:
                recommendation = "–ò—Å–ø–æ–ª—å–∑—É–π DeepL - –±–æ–ª–µ–µ –ª–∞–∫–æ–Ω–∏—á–Ω–æ"
            elif '–Ω–µ' in my_translation and '–Ω–µ' not in deepl_translation:
                recommendation = "–ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ"
            else:
                recommendation = "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ö–æ—Ä–æ—à–∏"
            
            print(f"üí° {recommendation}")
        
        return result


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def quick_consult(fragment: str, my_translation: str) -> Dict[str, Any]:
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É"""
    consultant = QuickConsultant()
    return consultant.quick_consult(fragment, my_translation)


def consult_fragments(fragments: List[str], my_translations: Optional[List[str]] = None) -> Dict[str, Any]:
    """–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"""
    consultant = DeepLConsultationBase()
    return consultant.consult_and_compare(fragments, my_translations)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –ö–û–ù–°–£–õ–¨–¢–ê–ù–¢–ê")
    
    test_fragments = [
        "Hello, this is a test!",
        "The system works perfectly."
    ]
    
    test_my_translations = [
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç!",
        "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ."
    ]
    
    try:
        consultant = DeepLConsultationBase()
        result = consultant.consult_and_compare(test_fragments, test_my_translations)
        
        if result['success']:
            print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            consultant.print_recommendations(result['recommendations'])
        else:
            print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
