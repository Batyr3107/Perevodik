#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Централизованная конфигурация проекта перевода
Содержит все настройки, API ключи и константы
"""

import os

# =============================================================================
# API КЛЮЧИ И НАСТРОЙКИ
# =============================================================================

# DeepL API ключ
DEEPL_API_KEY = '174cabf4-06f5-4f88-90a6-be7add90275a:fx'

# Устанавливаем переменную окружения
os.environ['DEEPL_API_KEY'] = DEEPL_API_KEY

# =============================================================================
# НАСТРОЙКИ ПЕРЕВОДА
# =============================================================================

# Языковые коды
SOURCE_LANGUAGE = 'EN'
TARGET_LANGUAGE = 'RU'

# =============================================================================
# МНОГОМЕРНАЯ СИСТЕМА ОЦЕНКИ КАЧЕСТВА
# =============================================================================

# Веса для различных аспектов качества (сумма должна быть 1.0)
QUALITY_METRICS = {
    "dialogue_naturalness": 0.30,    # 30% - естественность диалогов
    "terminology_consistency": 0.25, # 25% - консистентность терминов
    "character_voice": 0.25,         # 25% - соответствие голосу персонажа
    "cultural_adaptation": 0.20      # 20% - культурная адаптация
}

# Минимальные пороги для каждого аспекта (0-100)
MIN_QUALITY_THRESHOLDS = {
    "dialogue_naturalness": 95,
    "terminology_consistency": 98,
    "character_voice": 95,
    "cultural_adaptation": 90
}

# Общий минимальный балл качества
MIN_QUALITY_SCORE = 98
STRUCTURE_MATCH_THRESHOLD = 100

# =============================================================================
# НАСТРОЙКИ АНАЛИЗА ДИАЛОГОВ
# =============================================================================

# Паттерны для улучшения естественности диалогов
DIALOGUE_IMPROVEMENTS = {
    "remove_formality": [
        "Я собираюсь", "Позвольте мне", "Не могли бы вы",
        "Я хотел бы", "Кажется, что", "Я боюсь, что"
    ],
    "add_naturalness": [
        "Буду", "Дай мне", "Можешь",
        "Хочу", "Похоже", "Боюсь"
    ],
    "character_specific": {
        "Jiang_Chen": "максимальная естественность, минимум формальности",
        "Ye_Qingcheng": "элегантность с эмоциональностью", 
        "Du_Guyun": "уверенность и пафос",
        "Elders": "мудрость и древность",
        "Disciples": "почтительность и энергия"
    }
}

# =============================================================================
# НАСТРОЙКИ КОНТЕКСТНОЙ ПАМЯТИ
# =============================================================================

# Настройки для translation memory
TRANSLATION_MEMORY = {
    "similarity_threshold": 0.85,  # Порог схожести для поиска
    "max_results": 5,              # Максимум результатов поиска
    "context_window": 3,           # Количество предложений контекста
    "enable_learning": True        # Включить обучение на переводах
}

# =============================================================================
# НАСТРОЙКИ СТИЛЯ ПЕРЕВОДА ДЛЯ ВЕБ-НОВЕЛЛ
# =============================================================================

# Стиль перевода
TRANSLATION_STYLE = "modern_web_novel"  # НЕ "literary"

# Максимальная длина предложения (слов)
MAX_SENTENCE_LENGTH = 15

# Запрещённые архаизмы (полностью убираем)
BANNED_ARCHAISMS = [
    "сей", "сия", "оный", "дабы", "ибо", 
    "воистину", "весьма", "отнюдь", "непременно",
    "молвить", "воззреть", "вопрошать", "ныне",
    "осуществлять", "производить впечатление", "испытывать чувство"
]

# Современные замены для молодых персонажей
YOUTH_SLANG = {
    "очень мощный": "крутой",
    "действительно": "реально", 
    "прекрасно": "топово",
    "удивительно": "прикольно",
    "страшно": "жёстко",
    "сильный": "мощный"
}

# Целевая читабельность (0-100, где 100 = очень легко)
TARGET_READABILITY = 85

# Настройки для разных типов персонажей
CHARACTER_STYLES = {
    "Jiang_Chen": {
        "style": "modern_casual",
        "thoughts": "грубоватые, современные",
        "speech": "холодная, но не архаичная"
    },
    "Ye_Qingcheng": {
        "style": "elegant_modern", 
        "thoughts": "эмоциональные, но не вульгарные",
        "speech": "формальная, но понятная"
    },
    "Du_Guyun": {
        "style": "heroic_modern",
        "thoughts": "уверенные, но не высокопарные", 
        "speech": "пафосные, но читаемые"
    },
    "Elders": {
        "style": "wise_accessible",
        "thoughts": "мудрые, но не архаичные",
        "speech": "почтительные, но понятные"
    }
}

# =============================================================================
# ПУТИ К ФАЙЛАМ
# =============================================================================

# Справочные файлы
GLOSSARY_FILE = 'глоссарий.txt'
PLOT_REFERENCE_FILE = 'сюжет-справочник.txt'
ERRORS_FILE = 'ошибки-перевода.txt'
TRANSLATION_LOG_FILE = 'журнал-переводов.txt'
CHARACTER_VOICES_FILE = 'character_voices.json'

# =============================================================================
# НАСТРОЙКИ CULTIVATION NOVEL
# =============================================================================

# Структурированная система для cultivation терминов
CULTIVATION_LEVELS = {
    "Qi Condensation": {
        "ru": "Конденсация Ци",
        "stages": 9,
        "alternatives": ["Сгущение Ци", "Уплотнение Ци"],
        "context_notes": "используй 'Закладка' в боевых сценах"
    },
    "Foundation Establishment": {
        "ru": "Основание Фундамента",
        "stages": 3,
        "alternatives": ["Закладка Фундамента", "Создание Основы"],
        "context_notes": "формально в описаниях, 'Закладка' в диалогах"
    },
    "Core Formation": {
        "ru": "Формирование Ядра",
        "stages": 3,
        "alternatives": ["Создание Ядра", "Образование Сердца"],
        "context_notes": "всегда 'Ядро', не 'Сердце'"
    }
}

# Система обращений и титулов
HONORIFICS = {
    "Senior Brother": {
        "formal": "Старший Брат",
        "casual": "Старший",
        "hostile": "Этот старший",
        "context": "зависит от отношений"
    },
    "Junior Sister": {
        "formal": "Младшая Сестра",
        "casual": "Младшая",
        "intimate": "Сестренка",
        "context": "Цзян Чэнь использует 'Младшая'"
    },
    "Elder": {
        "formal": "Старейшина",
        "respectful": "Почтенный Старейшина",
        "context": "всегда с большой буквы"
    }
}

# =============================================================================
# НАСТРОЙКИ ФОРМАТИРОВАНИЯ
# =============================================================================

# Нормализация пустых строк
NORMALIZE_EMPTY_LINES = True
MAX_EMPTY_LINES = 1

# Типографика
RUSSIAN_QUOTES = True  # Использовать «ёлочки» вместо "лапок"

# =============================================================================
# НАСТРОЙКИ КОНСУЛЬТАЦИЙ
# =============================================================================

# Максимальное количество фрагментов для консультации за раз
MAX_CONSULTATION_FRAGMENTS = 50

# Таймаут для API запросов (секунды)
API_TIMEOUT = 30

# =============================================================================
# НАСТРОЙКИ ЛОГИРОВАНИЯ
# =============================================================================

# Уровень детализации логов
LOG_LEVEL = 'INFO'  # DEBUG, INFO, WARNING, ERROR

# Формат логов
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

# =============================================================================
# УТИЛИТЫ
# =============================================================================

def get_api_key():
    """Получить API ключ из переменной окружения или конфига"""
    return os.getenv('DEEPL_API_KEY') or DEEPL_API_KEY

def validate_config():
    """Проверить корректность конфигурации"""
    errors = []
    
    if not get_api_key():
        errors.append("API ключ не найден")
    
    if not os.path.exists(GLOSSARY_FILE):
        errors.append(f"Файл глоссария не найден: {GLOSSARY_FILE}")
    
    return errors

def calculate_quality_score(scores):
    """Рассчитать общий балл качества на основе многомерной системы"""
    total_score = 0
    for metric, weight in QUALITY_METRICS.items():
        if metric in scores:
            total_score += scores[metric] * weight
    return round(total_score, 1)

def check_quality_thresholds(scores):
    """Проверить, превышены ли минимальные пороги качества"""
    issues = []
    for metric, threshold in MIN_QUALITY_THRESHOLDS.items():
        if metric in scores and scores[metric] < threshold:
            issues.append(f"{metric}: {scores[metric]}/{threshold}")
    return issues

def print_config_status():
    """Вывести статус конфигурации"""
    print("🔧 СТАТУС КОНФИГУРАЦИИ")
    print("=" * 40)
    
    # API ключ
    api_key = get_api_key()
    if api_key:
        print(f"✅ API ключ: {api_key[:10]}...{api_key[-3:]}")
    else:
        print("❌ API ключ не найден")
    
    # Файлы
    files_to_check = [GLOSSARY_FILE, PLOT_REFERENCE_FILE, ERRORS_FILE, CHARACTER_VOICES_FILE]
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"✅ {file_path}")
        else:
            print(f"⚠️  {file_path} (не найден)")
    
    # Система качества
    print(f"\n📊 СИСТЕМА ОЦЕНКИ КАЧЕСТВА:")
    for metric, weight in QUALITY_METRICS.items():
        print(f"   • {metric}: {weight*100:.0f}% веса")
    
    # Проверка конфигурации
    errors = validate_config()
    if errors:
        print("\n❌ ОШИБКИ КОНФИГУРАЦИИ:")
        for error in errors:
            print(f"   • {error}")
    else:
        print("\n✅ Конфигурация корректна")

if __name__ == "__main__":
    print_config_status()
