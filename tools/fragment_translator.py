#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å DeepL –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º —Ç–µ–∫—Å—Ç–∞
–î–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
"""

import os
import sys
from typing import List, Dict
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–º—É –º–æ–¥—É–ª—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from deepl_translator import DeepLFileTranslator
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å deepl_translator")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install requests")
    sys.exit(1)


class FragmentConsultant:
    """–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ DeepL"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        try:
            self.translator = DeepLFileTranslator()
            print("‚úÖ DeepL –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≥–æ—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepL: {e}")
            raise
    
    def consult_fragments(self, fragments: List[str], my_translations: List[str] = None) -> Dict:
        """
        –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        
        Args:
            fragments: –°–ø–∏—Å–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            my_translations: –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        """
        print(f"ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å DeepL –ø–æ {len(fragments)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º...")
        
        results = {
            'fragments': [],
            'comparison': [],
            'recommendations': []
        }
        
        for i, fragment in enumerate(fragments):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç DeepL
                deepl_version = self.translator.translate_text(fragment.strip())
                
                fragment_result = {
                    'index': i + 1,
                    'original': fragment,
                    'deepl_translation': deepl_version,
                    'my_translation': my_translations[i] if my_translations and i < len(my_translations) else None
                }
                
                results['fragments'].append(fragment_result)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–æ–π –ø–µ—Ä–µ–≤–æ–¥ - –¥–µ–ª–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                if my_translations and i < len(my_translations):
                    my_version = my_translations[i].strip()
                    comparison = self._compare_translations(my_version, deepl_version, fragment)
                    results['comparison'].append(comparison)
                
                print(f"  ‚úÖ –§—Ä–∞–≥–º–µ–Ω—Ç {i+1}/{len(fragments)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º {i+1}: {e}")
                fragment_result = {
                    'index': i + 1,
                    'original': fragment,
                    'error': str(e)
                }
                results['fragments'].append(fragment_result)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        results['recommendations'] = self._generate_recommendations(results)
        
        return results
    
    def _compare_translations(self, my_version: str, deepl_version: str, original: str) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        length_diff = abs(len(my_version) - len(deepl_version))
        similarity_score = self._calculate_similarity(my_version, deepl_version)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        analysis = {
            'my_version': my_version,
            'deepl_version': deepl_version,
            'original': original,
            'length_difference': length_diff,
            'similarity_score': similarity_score,
            'recommendation': self._get_recommendation(my_version, deepl_version, similarity_score)
        }
        
        return analysis
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤"""
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        
        if not words1 and not words2:
            return 1.0
        
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        
        return len(intersection) / len(union) if union else 0.0
    
    def _get_recommendation(self, my_version: str, deepl_version: str, similarity: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        
        if similarity > 0.8:
            return "üü¢ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ - –ª—é–±–æ–π —Ö–æ—Ä–æ—à"
        elif similarity > 0.5:
            return "üü° –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è - –≤—ã–±–µ—Ä–∏ –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
        else:
            return "üî¥ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è - —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    
    def _generate_recommendations(self, results: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        if not results['comparison']:
            return ["üí° –¢–æ–ª—å–∫–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è DeepL - –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å"]
        
        total_comparisons = len(results['comparison'])
        high_similarity = sum(1 for c in results['comparison'] if c['similarity_score'] > 0.8)
        low_similarity = sum(1 for c in results['comparison'] if c['similarity_score'] < 0.5)
        
        if high_similarity / total_comparisons > 0.8:
            recommendations.append("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏")
        
        if low_similarity / total_comparisons > 0.3:
            recommendations.append("‚ö†Ô∏è –ú–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π —Å DeepL - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞")
        
        recommendations.append(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {high_similarity}/{total_comparisons} —Å—Ö–æ–∂–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
        
        return recommendations
    
    def print_consultation_report(self, results: Dict):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        
        print("\n" + "="*60)
        print("üìã –û–¢–ß–ï–¢ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò –° DEEPL")
        print("="*60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_fragments = len(results['fragments'])
        successful = len([f for f in results['fragments'] if 'error' not in f])
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {successful}/{total_fragments}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º
        for fragment in results['fragments']:
            if 'error' in fragment:
                print(f"\n‚ùå –§—Ä–∞–≥–º–µ–Ω—Ç {fragment['index']}: –û–®–ò–ë–ö–ê")
                print(f"   {fragment['error']}")
                continue
                
            print(f"\nüìù –§—Ä–∞–≥–º–µ–Ω—Ç {fragment['index']}:")
            print(f"   üá¨üáß –û—Ä–∏–≥–∏–Ω–∞–ª: {fragment['original'][:60]}{'...' if len(fragment['original']) > 60 else ''}")
            print(f"   ü§ñ DeepL: {fragment['deepl_translation']}")
            
            if fragment.get('my_translation'):
                print(f"   üë§ –ú–æ–π: {fragment['my_translation']}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if results['comparison']:
            print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –ü–ï–†–ï–í–û–î–û–í:")
            for i, comp in enumerate(results['comparison'], 1):
                print(f"\n   {i}. {comp['recommendation']}")
                print(f"      –°—Ö–æ–∂–µ—Å—Ç—å: {comp['similarity_score']:.2f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if results['recommendations']:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in results['recommendations']:
                print(f"   {rec}")
        
        print("\n" + "="*60)


def quick_consult(fragment: str, my_translation: str = None) -> Dict:
    """
    –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –æ–¥–Ω–æ–º—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç—É
    
    Args:
        fragment: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        my_translation: –ú–æ–π –ø–µ—Ä–µ–≤–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    consultant = FragmentConsultant()
    
    my_translations = [my_translation] if my_translation else None
    results = consultant.consult_fragments([fragment], my_translations)
    
    consultant.print_consultation_report(results)
    
    return results


def consult_file_fragments(file_path: str, my_translations_file: str = None) -> Dict:
    """
    –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ (–∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
        my_translations_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –º–æ–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    """
    
    # –ß–∏—Ç–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
    with open(file_path, 'r', encoding='utf-8') as f:
        fragments = [line.strip() for line in f if line.strip()]
    
    # –ß–∏—Ç–∞–µ–º –º–æ–∏ –ø–µ—Ä–µ–≤–æ–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    my_translations = None
    if my_translations_file and Path(my_translations_file).exists():
        with open(my_translations_file, 'r', encoding='utf-8') as f:
            my_translations = [line.strip() for line in f if line.strip()]
    
    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    consultant = FragmentConsultant()
    results = consultant.consult_fragments(fragments, my_translations)
    
    consultant.print_consultation_report(results)
    
    return results


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    test_fragment = '"Finally, she\'s gone!" Jiang Chen exhaled with relief.'
    my_test_translation = '"–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –æ–Ω–∞ —É—à–ª–∞!" –¶–∑—è–Ω –ß—ç–Ω—å —Å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ–º –≤—ã–¥–æ—Ö–Ω—É–ª.'
    
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")
    quick_consult(test_fragment, my_test_translation)
    
    # –¢–µ—Å—Ç 2: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º
    test_fragments = [
        "From his perspective, apart from being brainless, Ye Qingcheng was like bad luck",
        "System, would it count as interfering with slacking off if I take action?",
        "The children of destiny are notoriously hard to kill"
    ]
    
    my_translations = [
        "–° –µ–≥–æ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, –ø–æ–º–∏–º–æ –±–µ–∑–º–æ–∑–≥–ª–æ—Å—Ç–∏, –ï –¶–∏–Ω—á—ç–Ω –±—ã–ª–∞ –∫–∞–∫ –Ω–µ–≤–µ–∑–µ–Ω–∏–µ",
        "–°–∏—Å—Ç–µ–º–∞, –±—É–¥–µ—Ç –ª–∏ —Å—á–∏—Ç–∞—Ç—å—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –≤ –±–µ–∑–¥–µ–ª—å–µ, –µ—Å–ª–∏ —è –ø—Ä–µ–¥–ø—Ä–∏–º—É –¥–µ–π—Å—Ç–≤–∏—è?",
        "–î–µ—Ç–µ–π —Å—É–¥—å–±—ã –ø–µ—á–∞–ª—å–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ —Ç—Ä—É–¥–Ω–æ —É–±–∏—Ç—å"
    ]
    
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É:")
    consultant = FragmentConsultant()
    results = consultant.consult_fragments(test_fragments, my_translations)
    consultant.print_consultation_report(results)
