#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞
"""

import os
import sys
import tempfile
from typing import Dict, Any, Optional, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import get_api_key, print_config_status, validate_config
from tools.translation_workflow import ChapterTranslationManager
from tools.consultation_base import DeepLConsultationBase, QuickConsultant


class TestEnvironment:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
    
    def __init__(self):
        self.original_env = os.environ.copy()
        self.test_files = []
    
    def setup(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        errors = validate_config()
        if errors:
            print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for error in errors:
                print(f"   ‚Ä¢ {error}")
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á
        api_key = get_api_key()
        if api_key:
            os.environ['DEEPL_API_KEY'] = api_key
            print(f"‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {api_key[:10]}...{api_key[-3:]}")
        else:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return True
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for file_path in self.test_files:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    print(f"   –£–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ.clear()
        os.environ.update(self.original_env)
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def create_test_file(self, filename: str, content: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        
        self.test_files.append(filename)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
        return filename


class TestManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    
    @staticmethod
    def create_translation_manager() -> ChapterTranslationManager:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        try:
            manager = ChapterTranslationManager()
            print("‚úÖ ChapterTranslationManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return manager
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            raise
    
    @staticmethod
    def create_consultation_base() -> DeepLConsultationBase:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        try:
            consultant = DeepLConsultationBase()
            print("‚úÖ DeepLConsultationBase —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return consultant
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞: {e}")
            raise
    
    @staticmethod
    def create_quick_consultant() -> QuickConsultant:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        try:
            consultant = QuickConsultant()
            print("‚úÖ QuickConsultant —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return consultant
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞: {e}")
            raise


class TestRunner:
    """–ó–∞–ø—É—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.env = TestEnvironment()
        self.manager = None
        self.consultant = None
    
    def run_basic_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("\nüß™ –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´")
        print("="*40)
        
        # –¢–µ—Å—Ç 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã
        if not self.env.setup():
            return False
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        try:
            self.manager = TestManager.create_translation_manager()
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
            return False
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        try:
            self.consultant = TestManager.create_consultation_base()
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
            return False
        
        print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
    
    def run_translation_tests(self) -> bool:
        """–¢–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
        print("\nüìù –¢–ï–°–¢–´ –ü–ï–†–ï–í–û–î–ê")
        print("="*40)
        
        if not self.manager:
            print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        try:
            test_text = "Hello, this is a test!"
            result = self.manager.translate_text(test_text)
            print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥: '{test_text}' ‚Üí '{result}'")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return False
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∞–π–ª–∞
        try:
            test_file = self.env.create_test_file(
                "test_english.txt",
                """Chapter Test: Translation System

"Finally, she's gone!" Jiang Chen exhaled with relief.

From his perspective, apart from being brainless, Ye Qingcheng was like bad luck."""
            )
            
            result = self.manager.translate_file(test_file, "test_russian.txt")
            print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–∞: {result['metadata']['output_file']}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∞–π–ª–∞: {e}")
            return False
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
    
    def run_consultation_tests(self) -> bool:
        """–¢–µ—Å—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
        print("\nü§ñ –¢–ï–°–¢–´ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ô")
        print("="*40)
        
        if not self.consultant:
            print("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º
        try:
            test_fragments = [
                "Hello, this is a test!",
                "The system works perfectly."
            ]
            
            test_my_translations = [
                "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç!",
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ."
            ]
            
            result = self.consultant.consult_and_compare(test_fragments, test_my_translations)
            
            if result['success']:
                print("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
            return False
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
    
    def run_full_workflow_test(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow"""
        print("\n‚öôÔ∏è –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û WORKFLOW")
        print("="*40)
        
        if not self.manager:
            print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–ª–∞–≤—É
            test_chapter = self.env.create_test_file(
                "–¢–µ—Å—Ç –ì–ª–∞–≤–∞ Workflow.txt",
                """Chapter 999: Full Workflow Test

"Finally, the integration is working!" the developer exclaimed with relief.

This is a test chapter to verify that the full translation workflow works correctly.

"System, would it count as interfering with slacking off if I translate using DeepL?" the AI inquired.

The developer was pleased with the result."""
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π workflow
            result = self.manager.translate_chapter_deepl(test_chapter, chapter_number=999)
            
            print(f"‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"   –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: {result['translator']}")
            print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality_score']}/100")
            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {result['structure_match']['structure_score']}/100")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ workflow: {e}")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*50)
        
        try:
            # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
            if not self.run_basic_tests():
                return False
            
            # –¢–µ—Å—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
            if not self.run_translation_tests():
                return False
            
            # –¢–µ—Å—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            if not self.run_consultation_tests():
                return False
            
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow
            if not self.run_full_workflow_test():
                return False
            
            print("\nüéâüéâüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâüéâüéâ")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return True
            
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            self.env.cleanup()


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    runner = TestRunner()
    return runner.run_basic_tests()


def full_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    runner = TestRunner()
    return runner.run_all_tests()


def test_deepl_setup():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DeepL"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DeepL API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = get_api_key()
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-3:]}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    try:
        from tools.deepl_translator import DeepLFileTranslator
        print("‚úÖ –ú–æ–¥—É–ª–∏ deepl_translator –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    try:
        translator = DeepLFileTranslator()
        print("‚úÖ DeepLFileTranslator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥
    try:
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥...")
        test_text = "Hello, this is a test!"
        result = translator.translate_text(test_text)
        print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: '{test_text}' ‚Üí '{result}'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return False
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True


if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ï–†–ï–í–û–î–ê")
    print("="*50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_config_status()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if full_test():
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        sys.exit(1)
