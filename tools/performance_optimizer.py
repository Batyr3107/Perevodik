#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
"""

import time
import psutil
import threading
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor, as_completed
import queue

@dataclass
class PerformanceMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    name: str
    value: float
    unit: str
    timestamp: str
    category: str

@dataclass
class PerformanceProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    operation_name: str
    start_time: float
    end_time: float
    duration: float
    memory_usage: float
    cpu_usage: float
    success: bool
    error_message: Optional[str] = None

class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.metrics = []
        self.profiles = []
        self.start_time = time.time()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.system_metrics = {
            "cpu_count": psutil.cpu_count(),
            "memory_total": psutil.virtual_memory().total,
            "disk_total": psutil.disk_usage('/').total
        }
    
    def start_profile(self, operation_name: str) -> PerformanceProfile:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        profile = PerformanceProfile(
            operation_name=operation_name,
            start_time=time.time(),
            end_time=0,
            duration=0,
            memory_usage=psutil.Process().memory_info().rss,
            cpu_usage=psutil.cpu_percent(),
            success=False
        )
        return profile
    
    def end_profile(self, profile: PerformanceProfile, success: bool = True, error_message: str = None):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        profile.end_time = time.time()
        profile.duration = profile.end_time - profile.start_time
        profile.success = success
        profile.error_message = error_message
        profile.memory_usage = psutil.Process().memory_info().rss
        profile.cpu_usage = psutil.cpu_percent()
        
        self.profiles.append(profile)
    
    def add_metric(self, name: str, value: float, unit: str, category: str = "general"):
        """–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É"""
        metric = PerformanceMetric(
            name=name,
            value=value,
            unit=unit,
            timestamp=datetime.now().isoformat(),
            category=category
        )
        self.metrics.append(metric)
    
    def get_system_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        return {
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
            "memory_available": psutil.virtual_memory().available,
            "disk_percent": psutil.disk_usage('/').percent,
            "disk_free": psutil.disk_usage('/').free,
            "uptime": time.time() - self.start_time
        }
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.profiles:
            return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        operation_stats = {}
        for profile in self.profiles:
            op_name = profile.operation_name
            if op_name not in operation_stats:
                operation_stats[op_name] = {
                    "count": 0,
                    "total_duration": 0,
                    "success_count": 0,
                    "error_count": 0,
                    "avg_duration": 0,
                    "min_duration": float('inf'),
                    "max_duration": 0
                }
            
            stats = operation_stats[op_name]
            stats["count"] += 1
            stats["total_duration"] += profile.duration
            stats["success_count"] += 1 if profile.success else 0
            stats["error_count"] += 0 if profile.success else 1
            
            stats["min_duration"] = min(stats["min_duration"], profile.duration)
            stats["max_duration"] = max(stats["max_duration"], profile.duration)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for op_name, stats in operation_stats.items():
            if stats["count"] > 0:
                stats["avg_duration"] = stats["total_duration"] / stats["count"]
                stats["success_rate"] = stats["success_count"] / stats["count"] * 100
        
        return {
            "total_operations": len(self.profiles),
            "operation_stats": operation_stats,
            "system_metrics": self.get_system_metrics(),
            "uptime": time.time() - self.start_time
        }
    
    def print_performance_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        summary = self.get_performance_summary()
        
        print("\nüìä –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 50)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        sys_metrics = summary["system_metrics"]
        print(f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞:")
        print(f"   CPU: {sys_metrics['cpu_percent']:.1f}%")
        print(f"   –ü–∞–º—è—Ç—å: {sys_metrics['memory_percent']:.1f}%")
        print(f"   –î–∏—Å–∫: {sys_metrics['disk_percent']:.1f}%")
        print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {sys_metrics['uptime']:.1f}—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        if "operation_stats" in summary:
            print(f"\n‚ö° –û–ø–µ—Ä–∞—Ü–∏–∏:")
            for op_name, stats in summary["operation_stats"].items():
                print(f"   {op_name}:")
                print(f"     –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {stats['count']}")
                print(f"     –£—Å–ø–µ—à–Ω—ã—Ö: {stats['success_count']} ({stats['success_rate']:.1f}%)")
                print(f"     –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {stats['avg_duration']:.3f}—Å")
                print(f"     –ú–∏–Ω/–ú–∞–∫—Å: {stats['min_duration']:.3f}—Å / {stats['max_duration']:.3f}—Å")

class PerformanceOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.monitor = PerformanceMonitor()
        self.optimization_rules = []
        self.cache_hits = 0
        self.cache_misses = 0
    
    def profile_operation(self, operation_name: str):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
        def decorator(func: Callable) -> Callable:
            def wrapper(*args, **kwargs):
                profile = self.monitor.start_profile(operation_name)
                try:
                    result = func(*args, **kwargs)
                    self.monitor.end_profile(profile, success=True)
                    return result
                except Exception as e:
                    self.monitor.end_profile(profile, success=False, error_message=str(e))
                    raise
            return wrapper
        return decorator
    
    def optimize_translation_batch(self, texts: List[str], translate_func: Callable, 
                                 batch_size: int = 5) -> List[str]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥"""
        profile = self.monitor.start_profile("batch_translation")
        
        try:
            results = []
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
            for i in range(0, len(texts), batch_size):
                batch = texts[i:i + batch_size]
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–∞—Ç—á
                batch_results = translate_func(batch)
                results.extend(batch_results)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                time.sleep(0.1)
            
            self.monitor.end_profile(profile, success=True)
            return results
            
        except Exception as e:
            self.monitor.end_profile(profile, success=False, error_message=str(e))
            raise
    
    def optimize_parallel_processing(self, tasks: List[Callable], max_workers: int = 4) -> List[Any]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        profile = self.monitor.start_profile("parallel_processing")
        
        try:
            results = []
            
            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
                future_to_task = {executor.submit(task): task for task in tasks}
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for future in as_completed(future_to_task):
                    try:
                        result = future.result()
                        results.append(result)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")
                        results.append(None)
            
            self.monitor.end_profile(profile, success=True)
            return results
            
        except Exception as e:
            self.monitor.end_profile(profile, success=False, error_message=str(e))
            raise
    
    def optimize_memory_usage(self, func: Callable, *args, **kwargs):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        profile = self.monitor.start_profile("memory_optimized_operation")
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            result = func(*args, **kwargs)
            
            # –°–Ω–æ–≤–∞ —Å–æ–±–∏—Ä–∞–µ–º –º—É—Å–æ—Ä
            gc.collect()
            
            self.monitor.end_profile(profile, success=True)
            return result
            
        except Exception as e:
            self.monitor.end_profile(profile, success=False, error_message=str(e))
            raise
    
    def add_cache_hit(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à"""
        self.cache_hits += 1
    
    def add_cache_miss(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞"""
        self.cache_misses += 1
    
    def get_cache_efficiency(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
        total = self.cache_hits + self.cache_misses
        if total == 0:
            return 0.0
        return self.cache_hits / total * 100
    
    def suggest_optimizations(self) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        suggestions = []
        summary = self.monitor.get_performance_summary()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        sys_metrics = summary["system_metrics"]
        
        if sys_metrics["cpu_percent"] > 80:
            suggestions.append("üî¥ –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        if sys_metrics["memory_percent"] > 85:
            suggestions.append("üî¥ –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–µ–π")
        
        if sys_metrics["disk_percent"] > 90:
            suggestions.append("üî¥ –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ - –æ—á–∏—Å—Ç–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        if "operation_stats" in summary:
            for op_name, stats in summary["operation_stats"].items():
                if stats["success_rate"] < 90:
                    suggestions.append(f"üü° –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –¥–ª—è {op_name}: {stats['success_rate']:.1f}%")
                
                if stats["avg_duration"] > 5.0:
                    suggestions.append(f"üü° –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è {op_name}: {stats['avg_duration']:.1f}—Å")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
        cache_efficiency = self.get_cache_efficiency()
        if cache_efficiency < 50:
            suggestions.append(f"üü° –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {cache_efficiency:.1f}%")
        
        return suggestions
    
    def print_optimization_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        self.monitor.print_performance_report()
        
        print(f"\nüíæ –ö—ç—à:")
        print(f"   –ü–æ–ø–∞–¥–∞–Ω–∏–π: {self.cache_hits}")
        print(f"   –ü—Ä–æ–º–∞—Ö–æ–≤: {self.cache_misses}")
        print(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {self.get_cache_efficiency():.1f}%")
        
        suggestions = self.suggest_optimizations()
        if suggestions:
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
            for suggestion in suggestions:
                print(f"   {suggestion}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
global_optimizer = PerformanceOptimizer()

def optimize_performance(operation_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return global_optimizer.profile_operation(operation_name)

def test_performance_optimizer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    optimizer = PerformanceOptimizer()
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    @optimizer.profile_operation("test_operation")
    def test_function():
        time.sleep(0.1)
        return "test_result"
    
    result = test_function()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {result}")
    
    # –¢–µ—Å—Ç –∫—ç—à–∞
    for _ in range(10):
        optimizer.add_cache_hit()
    for _ in range(5):
        optimizer.add_cache_miss()
    
    print(f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {optimizer.get_cache_efficiency():.1f}%")
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    optimizer.print_optimization_report()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_performance_optimizer()
