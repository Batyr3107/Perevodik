#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
"""

import time
import psutil
import csv
import json
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
import threading
import queue
import os

@dataclass
class PerformanceMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    timestamp: str
    metric_name: str
    value: float
    unit: str
    category: str
    details: Dict[str, Any] = None

@dataclass
class SystemMetrics:
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    cpu_percent: float
    memory_percent: float
    memory_used_mb: float
    memory_available_mb: float
    disk_usage_percent: float
    active_threads: int
    timestamp: str

@dataclass
class TranslationMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    total_translations: int
    cache_hits: int
    api_calls: int
    avg_translation_time: float
    total_processing_time: float
    error_count: int
    quality_score_avg: float
    timestamp: str

class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, log_file: str = "performance_metrics.json"):
        self.log_file = log_file
        self.metrics_queue = queue.Queue()
        self.metrics_history = []
        self.start_time = time.time()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.system_metrics = []
        self.translation_metrics = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_metrics_collected': 0,
            'system_checks': 0,
            'translation_checks': 0,
            'errors': 0
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
        self.monitoring_active = True
        self.monitor_thread = threading.Thread(target=self._background_monitoring, daemon=True)
        self.monitor_thread.start()
        
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
    
    def record_metric(self, metric_name: str, value: float, unit: str, 
                     category: str, details: Dict[str, Any] = None):
        """–ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É"""
        metric = PerformanceMetric(
            timestamp=datetime.now().isoformat(),
            metric_name=metric_name,
            value=value,
            unit=unit,
            category=category,
            details=details or {}
        )
        
        self.metrics_queue.put(metric)
        self.stats['total_metrics_collected'] += 1
    
    def record_translation_metrics(self, translations: int, cache_hits: int, 
                                 api_calls: int, processing_time: float,
                                 errors: int = 0, quality_score: float = 0.0):
        """–ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        metric = TranslationMetrics(
            total_translations=translations,
            cache_hits=cache_hits,
            api_calls=api_calls,
            avg_translation_time=processing_time / max(translations, 1),
            total_processing_time=processing_time,
            error_count=errors,
            quality_score_avg=quality_score,
            timestamp=datetime.now().isoformat()
        )
        
        self.translation_metrics.append(metric)
        self.stats['translation_checks'] += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        self.record_metric("translations_total", translations, "count", "translation")
        self.record_metric("cache_hit_rate", cache_hits / max(translations, 1), "percent", "performance")
        self.record_metric("api_calls", api_calls, "count", "api")
        self.record_metric("avg_translation_time", processing_time / max(translations, 1), "seconds", "performance")
    
    def get_system_metrics(self) -> SystemMetrics:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=0.1)
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_used_mb = memory.used / 1024 / 1024
            memory_available_mb = memory.available / 1024 / 1024
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            disk_usage_percent = (disk.used / disk.total) * 100
            
            # –ü–æ—Ç–æ–∫–∏
            active_threads = threading.active_count()
            
            metrics = SystemMetrics(
                cpu_percent=cpu_percent,
                memory_percent=memory_percent,
                memory_used_mb=memory_used_mb,
                memory_available_mb=memory_available_mb,
                disk_usage_percent=disk_usage_percent,
                active_threads=active_threads,
                timestamp=datetime.now().isoformat()
            )
            
            self.system_metrics.append(metrics)
            self.stats['system_checks'] += 1
            
            return metrics
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            self.stats['errors'] += 1
            return None
    
    def _background_monitoring(self):
        """–§–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫"""
        while self.monitoring_active:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                self.get_system_metrics()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –º–µ—Ç—Ä–∏–∫
                while not self.metrics_queue.empty():
                    try:
                        metric = self.metrics_queue.get_nowait()
                        self.metrics_history.append(metric)
                    except queue.Empty:
                        break
                
                time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                self.stats['errors'] += 1
                time.sleep(10)
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        uptime = time.time() - self.start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        if self.system_metrics:
            avg_cpu = sum(m.cpu_percent for m in self.system_metrics) / len(self.system_metrics)
            avg_memory = sum(m.memory_percent for m in self.system_metrics) / len(self.system_metrics)
            max_memory = max(m.memory_used_mb for m in self.system_metrics)
        else:
            avg_cpu = avg_memory = max_memory = 0.0
        
        # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
        if self.translation_metrics:
            total_translations = sum(m.total_translations for m in self.translation_metrics)
            total_cache_hits = sum(m.cache_hits for m in self.translation_metrics)
            total_api_calls = sum(m.api_calls for m in self.translation_metrics)
            avg_quality = sum(m.quality_score_avg for m in self.translation_metrics) / len(self.translation_metrics)
            cache_hit_rate = total_cache_hits / max(total_translations, 1)
        else:
            total_translations = total_cache_hits = total_api_calls = avg_quality = cache_hit_rate = 0
        
        return {
            'uptime_seconds': uptime,
            'uptime_formatted': str(timedelta(seconds=int(uptime))),
            'system_metrics': {
                'avg_cpu_percent': avg_cpu,
                'avg_memory_percent': avg_memory,
                'max_memory_used_mb': max_memory,
                'system_checks_count': len(self.system_metrics)
            },
            'translation_metrics': {
                'total_translations': total_translations,
                'total_cache_hits': total_cache_hits,
                'total_api_calls': total_api_calls,
                'cache_hit_rate': cache_hit_rate,
                'avg_quality_score': avg_quality,
                'translation_checks_count': len(self.translation_metrics)
            },
            'monitoring_stats': {
                'total_metrics_collected': self.stats['total_metrics_collected'],
                'errors': self.stats['errors'],
                'metrics_history_size': len(self.metrics_history)
            }
        }
    
    def export_metrics_csv(self, filename: str = None):
        """–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ CSV"""
        if not filename:
            filename = f"performance_metrics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['timestamp', 'metric_name', 'value', 'unit', 'category', 'details']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for metric in self.metrics_history:
                    writer.writerow(asdict(metric))
            
            print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV: {e}")
            return None
    
    def export_system_metrics_csv(self, filename: str = None):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ CSV"""
        if not filename:
            filename = f"system_metrics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['timestamp', 'cpu_percent', 'memory_percent', 'memory_used_mb', 
                             'memory_available_mb', 'disk_usage_percent', 'active_threads']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for metric in self.system_metrics:
                    writer.writerow(asdict(metric))
            
            print(f"üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return None
    
    def export_translation_metrics_csv(self, filename: str = None):
        """–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ CSV"""
        if not filename:
            filename = f"translation_metrics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['timestamp', 'total_translations', 'cache_hits', 'api_calls',
                             'avg_translation_time', 'total_processing_time', 'error_count', 'quality_score_avg']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for metric in self.translation_metrics:
                    writer.writerow(asdict(metric))
            
            print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return None
    
    def save_metrics_json(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –≤ JSON"""
        if not filename:
            filename = f"all_metrics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            data = {
                'summary': self.get_performance_summary(),
                'system_metrics': [asdict(m) for m in self.system_metrics],
                'translation_metrics': [asdict(m) for m in self.translation_metrics],
                'performance_metrics': [asdict(m) for m in self.metrics_history],
                'export_timestamp': datetime.now().isoformat()
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            print(f"üìä –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
            return None
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        summary = self.get_performance_summary()
        
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*60)
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {summary['uptime_formatted']}")
        
        print(f"\nüñ•Ô∏è  –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        sys_metrics = summary['system_metrics']
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {sys_metrics['avg_cpu_percent']:.1f}%")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {sys_metrics['avg_memory_percent']:.1f}%")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {sys_metrics['max_memory_used_mb']:.1f} MB")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–∏—Å—Ç–µ–º—ã: {sys_metrics['system_checks_count']}")
        
        print(f"\nüîÑ –ú–ï–¢–†–ò–ö–ò –ü–ï–†–ï–í–û–î–ê:")
        trans_metrics = summary['translation_metrics']
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {trans_metrics['total_translations']}")
        print(f"   ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à: {trans_metrics['cache_hit_rate']:.2%}")
        print(f"   ‚Ä¢ API –≤—ã–∑–æ–≤–æ–≤: {trans_metrics['total_api_calls']}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {trans_metrics['avg_quality_score']:.1f}")
        
        print(f"\nüìà –ú–û–ù–ò–¢–û–†–ò–ù–ì:")
        monitor_stats = summary['monitoring_stats']
        print(f"   ‚Ä¢ –°–æ–±—Ä–∞–Ω–æ –º–µ—Ç—Ä–∏–∫: {monitor_stats['total_metrics_collected']}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {monitor_stats['errors']}")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏: {monitor_stats['metrics_history_size']}")
        
        print("="*60)
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring_active = False
        if self.monitor_thread.is_alive():
            self.monitor_thread.join(timeout=5)
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    monitor = PerformanceMonitor()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    print("üîÑ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
    
    for i in range(10):
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
        monitor.record_translation_metrics(
            translations=100 + i * 10,
            cache_hits=80 + i * 8,
            api_calls=20 + i * 2,
            processing_time=5.0 + i * 0.5,
            quality_score=95.0 + i * 0.1
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        monitor.record_metric("processing_speed", 1000 + i * 100, "items/sec", "performance")
        monitor.record_metric("memory_usage", 50 + i * 2, "MB", "system")
        
        time.sleep(1)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    monitor.print_summary()
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    monitor.export_metrics_csv()
    monitor.export_system_metrics_csv()
    monitor.export_translation_metrics_csv()
    monitor.save_metrics_json()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.stop_monitoring()

if __name__ == "__main__":
    main()
