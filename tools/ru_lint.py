#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ PowerShell —Å–∫—Ä–∏–ø—Ç—É
"""

import sys
import re
import argparse
from typing import List, Dict, Any, Tuple

class RussianLinter:
    """–õ–∏–Ω—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    
    def __init__(self):
        # –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∞—Ä—Ö–∞–∏–∑–º—ã
        self.banned_archaisms = [
            "—Å–µ–π", "—Å–∏—è", "–æ–Ω—ã–π", "–¥–∞–±—ã", "–∏–±–æ", 
            "–≤–æ–∏—Å—Ç–∏–Ω—É", "–≤–µ—Å—å–º–∞", "–æ—Ç–Ω—é–¥—å", "–Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ",
            "–º–æ–ª–≤–∏—Ç—å", "–≤–æ–∑–∑—Ä–µ—Ç—å", "–≤–æ–ø—Ä–æ—à–∞—Ç—å", "–Ω—ã–Ω–µ",
            "–æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ", "–∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ"
        ]
        
        # –ö–∞–ª—å–∫–∏ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º—ã
        self.calques = {
            "–∫—Ä–∞–π–Ω–µ": "–æ—á–µ–Ω—å",
            "—Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞": "–Ω–∞–ø—Ä–∞–≤–æ –∏ –Ω–∞–ª–µ–≤–æ",
            "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞": "–∏–¥–µ–∞–ª—å–Ω–∞",
            "–ù–∞ –µ–≥–æ –≤–∑–≥–ª—è–¥": "–° –µ–≥–æ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è",
            "—Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–ª": "—Ä–∞–∑–º—ã—à–ª—è–ª",
            "–æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å": "–¥–µ–ª–∞—Ç—å",
            "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ": "–≤–ø–µ—á–∞—Ç–ª—è—Ç—å",
            "–∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ": "—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å"
        }
        
        # –§–æ—Ä–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.formal_dialogue = {
            "–Ø —Å–æ–±–∏—Ä–∞—é—Å—å": "–ë—É–¥—É",
            "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ": "–î–∞–π –º–Ω–µ",
            "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã": "–ú–æ–∂–µ—à—å",
            "–Ø —Ö–æ—Ç–µ–ª –±—ã": "–•–æ—á—É",
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ": "–ü–æ—Ö–æ–∂–µ",
            "–Ø –±–æ—é—Å—å, —á—Ç–æ": "–ë–æ—é—Å—å",
            "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –≤—ã—Ä–∞–∑–∏—Ç—å": "–°–ø–∞—Å–∏–±–æ",
            "–ù–µ —Å–æ–±–ª–∞–≥–æ–≤–æ–ª–∏—Ç–µ –ª–∏ –≤—ã": "–ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã",
            "–û—Å–º–µ–ª—é—Å—å —Å–ø—Ä–æ—Å–∏—Ç—å": "–ú–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å?",
            "–°–∏–µ –¥–µ—è–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ": "–¢–∞–∫ –Ω–µ–ª—å–∑—è",
            "–í–æ–∏—Å—Ç–∏–Ω—É –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π": "–†–µ–∞–ª—å–Ω–æ –º–æ—â–Ω—ã–π"
        }
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        self.max_sentence_length = 15
    
    def check_archaisms(self, text: str) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ö–∞–∏–∑–º—ã"""
        issues = []
        
        for archaism in self.banned_archaisms:
            if archaism.lower() in text.lower():
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                for match in re.finditer(re.escape(archaism), text, re.IGNORECASE):
                    line_number = text[:match.start()].count('\n') + 1
                    context = text[max(0, match.start()-30):match.end()+30]
                    
                    issues.append({
                        "type": "–ê—Ä—Ö–∞–∏–∑–º",
                        "word": archaism,
                        "line": line_number,
                        "context": context,
                        "severity": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"
                    })
        
        return issues
    
    def check_calques(self, text: str) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ª—å–∫–∏"""
        issues = []
        
        for calque, suggestion in self.calques.items():
            if calque in text:
                for match in re.finditer(re.escape(calque), text):
                    line_number = text[:match.start()].count('\n') + 1
                    context = text[max(0, match.start()-30):match.end()+30]
                    
                    issues.append({
                        "type": "–ö–∞–ª—å–∫–∞",
                        "word": calque,
                        "suggestion": suggestion,
                        "line": line_number,
                        "context": context,
                        "severity": "–í—ã—Å–æ–∫–∞—è"
                    })
        
        return issues
    
    def check_formal_dialogue(self, text: str) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
        issues = []
        
        for formal, suggestion in self.formal_dialogue.items():
            if formal in text:
                for match in re.finditer(re.escape(formal), text):
                    line_number = text[:match.start()].count('\n') + 1
                    context = text[max(0, match.start()-30):match.end()+30]
                    
                    issues.append({
                        "type": "–§–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥",
                        "word": formal,
                        "suggestion": suggestion,
                        "line": line_number,
                        "context": context,
                        "severity": "–°—Ä–µ–¥–Ω—è—è"
                    })
        
        return issues
    
    def check_sentence_length(self, text: str) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        issues = []
        
        sentences = re.split(r'[.!?]+', text)
        
        for i, sentence in enumerate(sentences):
            sentence = sentence.strip()
            if sentence:
                words = sentence.split()
                if len(words) > self.max_sentence_length:
                    line_number = text.find(sentence) // 50 + 1  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                    issues.append({
                        "type": "–î–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                        "word": sentence,
                        "line": line_number,
                        "word_count": len(words),
                        "max_allowed": self.max_sentence_length,
                        "severity": "–°—Ä–µ–¥–Ω—è—è"
                    })
        
        return issues
    
    def calculate_readability(self, text: str) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏"""
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if s.strip()]
        
        words = text.split()
        words = [w for w in words if w.strip()]
        
        # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        avg_sentence_length = len(words) / len(sentences) if sentences else 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∞–∏–∑–º–æ–≤
        archaism_count = sum(1 for archaism in self.banned_archaisms 
                           if archaism.lower() in text.lower())
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        long_sentences = sum(1 for sentence in sentences 
                           if len(sentence.split()) > self.max_sentence_length)
        long_sentence_percentage = (long_sentences / len(sentences)) * 100 if sentences else 0
        
        # –û—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ (0-100, –≥–¥–µ 100 = –æ—á–µ–Ω—å –ª–µ–≥–∫–æ)
        readability_score = 100 - (avg_sentence_length * 2) - (archaism_count * 5) - (long_sentence_percentage * 0.5)
        readability_score = max(0, min(100, readability_score))
        
        return {
            "score": round(readability_score, 1),
            "avg_sentence_length": round(avg_sentence_length, 1),
            "archaism_count": archaism_count,
            "long_sentence_percentage": round(long_sentence_percentage, 1),
            "total_words": len(words),
            "total_sentences": len(sentences),
            "target": 85,
            "status": "–•–æ—Ä–æ—à–æ" if readability_score >= 85 else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ" if readability_score >= 70 else "–ü–ª–æ—Ö–æ"
        }
    
    def lint_file(self, file_path: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                text = f.read()
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}"}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        all_issues = []
        
        archaism_issues = self.check_archaisms(text)
        all_issues.extend(archaism_issues)
        
        calque_issues = self.check_calques(text)
        all_issues.extend(calque_issues)
        
        dialogue_issues = self.check_formal_dialogue(text)
        all_issues.extend(dialogue_issues)
        
        length_issues = self.check_sentence_length(text)
        all_issues.extend(length_issues)
        
        # –ê–Ω–∞–ª–∏–∑ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        readability = self.calculate_readability(text)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        critical_count = len([i for i in all_issues if i["severity"] == "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è"])
        high_count = len([i for i in all_issues if i["severity"] == "–í—ã—Å–æ–∫–∞—è"])
        medium_count = len([i for i in all_issues if i["severity"] == "–°—Ä–µ–¥–Ω—è—è"])
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        total_score = 100
        total_score -= critical_count * 20
        total_score -= high_count * 10
        total_score -= medium_count * 5
        total_score = max(0, total_score)
        
        return {
            "file_path": file_path,
            "text_length": len(text),
            "issues": all_issues,
            "readability": readability,
            "statistics": {
                "total_issues": len(all_issues),
                "critical": critical_count,
                "high": high_count,
                "medium": medium_count
            },
            "total_score": total_score
        }
    
    def print_report(self, result: Dict[str, Any]):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç"""
        if "error" in result:
            print(f"‚ùå {result['error']}")
            return
        
        print("üîç –†–£–°–°–ö–ò–ô –õ–ò–ù–¢–ï–† –î–õ–Ø –ü–ï–†–ï–í–û–î–û–í")
        print("=" * 50)
        print(f"üìÑ –§–∞–π–ª: {result['file_path']}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {result['text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø–∞–º
        if result["issues"]:
            print(f"\nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            print("=" * 60)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            issue_groups = {}
            for issue in result["issues"]:
                issue_type = issue["type"]
                if issue_type not in issue_groups:
                    issue_groups[issue_type] = []
                issue_groups[issue_type].append(issue)
            
            for issue_type, issues in issue_groups.items():
                print(f"\nüî∏ {issue_type} ({len(issues)} –ø—Ä–æ–±–ª–µ–º):")
                
                for issue in issues:
                    severity_color = {
                        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è": "üî¥",
                        "–í—ã—Å–æ–∫–∞—è": "üü†", 
                        "–°—Ä–µ–¥–Ω—è—è": "üü°"
                    }.get(issue["severity"], "‚ö™")
                    
                    print(f"  {severity_color} –°—Ç—Ä–æ–∫–∞ {issue['line']}: {issue['word']}")
                    if 'context' in issue:
                        print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...{issue['context']}...")
                    
                    if "suggestion" in issue:
                        print(f"     üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {issue['suggestion']}")
                    if "word_count" in issue:
                        print(f"     üìä –°–ª–æ–≤: {issue['word_count']} (–º–∞–∫—Å–∏–º—É–º: {issue['max_allowed']})")
        else:
            print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        
        # –û—Ç—á–µ—Ç –ø–æ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        readability = result["readability"]
        print(f"\nüìä –û–¢–ß–ï–¢ –ü–û –ß–ò–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò:")
        print("=" * 40)
        
        status_color = {
            "–•–æ—Ä–æ—à–æ": "‚úÖ",
            "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ": "‚ö†Ô∏è",
            "–ü–ª–æ—Ö–æ": "‚ùå"
        }.get(readability["status"], "‚ùì")
        
        print(f"–û—Ü–µ–Ω–∫–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏: {readability['score']}/100 {status_color} {readability['status']}")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {readability['avg_sentence_length']} —Å–ª–æ–≤")
        print(f"–ê—Ä—Ö–∞–∏–∑–º–æ–≤: {readability['archaism_count']}")
        print(f"–î–ª–∏–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {readability['long_sentence_percentage']}%")
        print(f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {readability['total_words']}")
        print(f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {readability['total_sentences']}")
        print(f"–¶–µ–ª–µ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {readability['target']}+")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = result["statistics"]
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {stats['critical']}")
        print(f"–í—ã—Å–æ–∫–∏–µ: {stats['high']}")
        print(f"–°—Ä–µ–¥–Ω–∏–µ: {stats['medium']}")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {stats['total_issues']}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        total_score = result["total_score"]
        score_color = "‚úÖ" if total_score >= 90 else "‚ö†Ô∏è" if total_score >= 70 else "‚ùå"
        
        print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {total_score}/100 {score_color}")
        
        if total_score >= 90:
            print("üéâ –û—Ç–ª–∏—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥! –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
        elif total_score >= 70:
            print("üëç –•–æ—Ä–æ—à–∏–π –ø–µ—Ä–µ–≤–æ–¥, –Ω–æ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å")
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–†—É—Å—Å–∫–∏–π –ª–∏–Ω—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
    parser.add_argument("file_path", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    parser.add_argument("--fix", action="store_true", help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    parser.add_argument("--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    linter = RussianLinter()
    result = linter.lint_file(args.file_path)
    linter.print_report(result)

if __name__ == "__main__":
    main()
