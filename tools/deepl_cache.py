#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è DeepL API
–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É
"""

import json
import hashlib
import os
import time
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
from pathlib import Path

class DeepLCache:
    """–ö—ç—à –¥–ª—è DeepL API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, cache_dir: str = "./deepl_cache", max_age_hours: int = 24):
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(exist_ok=True)
        self.max_age_hours = max_age_hours
        self.cache_file = self.cache_dir / "translations.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
        self.cache = self._load_cache()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "hits": 0,
            "misses": 0,
            "total_requests": 0,
            "cache_size": 0
        }
    
    def _load_cache(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.cache_file.exists():
            try:
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('cache', {})
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
                return {}
        return {}
    
    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'cache': self.cache,
                'metadata': {
                    'last_updated': datetime.now().isoformat(),
                    'stats': self.stats
                }
            }
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def _generate_key(self, text: str, source_lang: str = 'EN', target_lang: str = 'RU') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –æ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ —è–∑—ã–∫–æ–≤
        content = f"{text}|{source_lang}|{target_lang}"
        return hashlib.md5(content.encode('utf-8')).hexdigest()
    
    def _is_expired(self, timestamp: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –∫—ç—à–∞"""
        try:
            cache_time = datetime.fromisoformat(timestamp)
            expiry_time = cache_time + timedelta(hours=self.max_age_hours)
            return datetime.now() > expiry_time
        except Exception:
            return True
    
    def get(self, text: str, source_lang: str = 'EN', target_lang: str = 'RU') -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –∫—ç—à–∞"""
        key = self._generate_key(text, source_lang, target_lang)
        self.stats["total_requests"] += 1
        
        if key in self.cache:
            cache_entry = self.cache[key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if not self._is_expired(cache_entry['timestamp']):
                self.stats["hits"] += 1
                return cache_entry['translation']
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
                del self.cache[key]
        
        self.stats["misses"] += 1
        return None
    
    def set(self, text: str, translation: str, source_lang: str = 'EN', target_lang: str = 'RU'):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ –∫—ç—à"""
        key = self._generate_key(text, source_lang, target_lang)
        
        self.cache[key] = {
            'original_text': text,
            'translation': translation,
            'source_lang': source_lang,
            'target_lang': target_lang,
            'timestamp': datetime.now().isoformat(),
            'text_length': len(text)
        }
        
        self.stats["cache_size"] = len(self.cache)
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
        if len(self.cache) % 10 == 0:
            self._save_cache()
    
    def get_or_translate(self, text: str, translate_func, source_lang: str = 'EN', target_lang: str = 'RU') -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_translation = self.get(text, source_lang, target_lang)
        if cached_translation:
            return cached_translation
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º
        try:
            translation = translate_func(text)
            self.set(text, translation, source_lang, target_lang)
            return translation
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return text  # Fallback
    
    def batch_get_or_translate(self, texts: List[str], translate_func, 
                              source_lang: str = 'EN', target_lang: str = 'RU') -> List[str]:
        """–ü–∞–∫–µ—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ/–ø–µ—Ä–µ–≤–æ–¥"""
        results = []
        texts_to_translate = []
        indices_to_translate = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        for i, text in enumerate(texts):
            cached = self.get(text, source_lang, target_lang)
            if cached:
                results.append(cached)
            else:
                results.append(None)  # Placeholder
                texts_to_translate.append(text)
                indices_to_translate.append(i)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
        if texts_to_translate:
            try:
                translations = translate_func(texts_to_translate)
                for i, translation in enumerate(translations):
                    original_index = indices_to_translate[i]
                    original_text = texts_to_translate[i]
                    
                    results[original_index] = translation
                    self.set(original_text, translation, source_lang, target_lang)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
                for i, original_index in enumerate(indices_to_translate):
                    if results[original_index] is None:
                        results[original_index] = texts[original_index]
        
        return results
    
    def clear_expired(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏"""
        expired_keys = []
        for key, entry in self.cache.items():
            if self._is_expired(entry['timestamp']):
                expired_keys.append(key)
        
        for key in expired_keys:
            del self.cache[key]
        
        self.stats["cache_size"] = len(self.cache)
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(expired_keys)}")
    
    def clear_all(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        self.cache.clear()
        self.stats["cache_size"] = 0
        print("üßπ –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        hit_rate = (self.stats["hits"] / self.stats["total_requests"] * 100) if self.stats["total_requests"] > 0 else 0
        
        return {
            "cache_size": self.stats["cache_size"],
            "total_requests": self.stats["total_requests"],
            "hits": self.stats["hits"],
            "misses": self.stats["misses"],
            "hit_rate": round(hit_rate, 2),
            "cache_file": str(self.cache_file),
            "max_age_hours": self.max_age_hours
        }
    
    def print_stats(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        stats = self.get_stats()
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê DEEPL")
        print("=" * 40)
        print(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {stats['cache_size']} –∑–∞–ø–∏—Å–µ–π")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        print(f"–ü–æ–ø–∞–¥–∞–Ω–∏–π: {stats['hits']}")
        print(f"–ü—Ä–æ–º–∞—Ö–æ–≤: {stats['misses']}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: {stats['hit_rate']}%")
        print(f"–§–∞–π–ª –∫—ç—à–∞: {stats['cache_file']}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {stats['max_age_hours']} —á–∞—Å–æ–≤")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        self.clear_expired()
        self._save_cache()
        print("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

class CachedDeepLTranslator:
    """DeepL –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, cache_dir: str = "./deepl_cache"):
        self.cache = DeepLCache(cache_dir)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
        try:
            from tools.deepl_translator import DeepLFileTranslator
            self.translator = DeepLFileTranslator()
        except ImportError:
            print("‚ö†Ô∏è DeepLFileTranslator –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.translator = None
    
    def translate_text(self, text: str, source_lang: str = 'EN', target_lang: str = 'RU') -> str:
        """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not self.translator:
            return text
        
        def translate_func(t):
            return self.translator.translate_text(t, source_lang, target_lang)
        
        return self.cache.get_or_translate(text, translate_func, source_lang, target_lang)
    
    def translate_fragments(self, fragments: List[str], source_lang: str = 'EN', target_lang: str = 'RU') -> List[str]:
        """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not self.translator:
            return fragments
        
        def translate_func(texts):
            return self.translator.translate_text(texts, source_lang, target_lang)
        
        return self.cache.batch_get_or_translate(fragments, translate_func, source_lang, target_lang)
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        return self.cache.get_stats()
    
    def print_cache_stats(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        self.cache.print_stats()
    
    def cleanup_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        self.cache.cleanup()

def test_deepl_cache():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ DeepL"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–≠–®–ê DEEPL")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫—ç—à
    cache = DeepLCache(max_age_hours=1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_texts = [
        "Hello, world!",
        "This is a test.",
        "Hello, world!",  # –î—É–±–ª–∏–∫–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
        "Another test text."
    ]
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    def mock_translate(text):
        time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
        return f"[RU] {text}"
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫—ç—à–∞...")
    start_time = time.time()
    for text in test_texts:
        result = mock_translate(text)
    no_cache_time = time.time() - start_time
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫—ç—à–µ–º...")
    start_time = time.time()
    for text in test_texts:
        result = cache.get_or_translate(text, mock_translate)
    with_cache_time = time.time() - start_time
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cache.print_stats()
    
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –±–µ–∑ –∫—ç—à–∞: {no_cache_time:.2f}—Å")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Å –∫—ç—à–µ–º: {with_cache_time:.2f}—Å")
    print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {no_cache_time/with_cache_time:.1f}x")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_deepl_cache()
