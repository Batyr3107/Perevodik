import requests
import json
import os
import time
from pathlib import Path
from typing import List, Dict, Union

class DeepLFileTranslator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ DeepL API
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò –≤ Cursor
    """
    
    def __init__(self, api_key: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å API –∫–ª—é—á–æ–º"""
        self.api_key = api_key or os.getenv('DEEPL_API_KEY')
        if not self.api_key:
            raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEEPL_API_KEY")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π)
        if self.api_key.endswith(':fx'):
            self.base_url = "https://api-free.deepl.com/v2"
        else:
            self.base_url = "https://api.deepl.com/v2"
    
    def translate_text(self, text: Union[str, List[str]], 
                      source_lang: str = 'EN', 
                      target_lang: str = 'RU') -> Union[str, List[str]]:
        """
        –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
        
        Args:
            text: –¢–µ–∫—Å—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            source_lang: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é EN)
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RU)
        
        Returns:
            –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
        """
        endpoint = f"{self.base_url}/translate"
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        is_single = isinstance(text, str)
        texts = [text] if is_single else text
        
        params = {
            'auth_key': self.api_key,
            'text': texts,
            'source_lang': source_lang,
            'target_lang': target_lang
        }
        
        try:
            response = requests.post(endpoint, data=params)
            response.raise_for_status()
            
            result = response.json()
            translations = [t['text'] for t in result['translations']]
            
            return translations[0] if is_single else translations
            
        except requests.exceptions.HTTPError as e:
            print(f"HTTP Error: {e}")
            print(f"Response: {response.text}")
            raise
        except Exception as e:
            print(f"Error: {e}")
            raise
    
    def translate_file(self, input_file: str, output_file: str = None,
                      source_lang: str = 'EN', target_lang: str = 'RU',
                      file_format: str = 'auto') -> Dict:
        """
        –ü–µ—Ä–µ–≤–æ–¥ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
        
        Args:
            input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            source_lang: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
            target_lang: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
            file_format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (auto, txt, json, lines)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
        """
        input_path = Path(input_file)
        
        if not input_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
        if file_format == 'auto':
            if input_path.suffix == '.json':
                file_format = 'json'
            elif input_path.suffix in ['.txt', '.text']:
                file_format = 'txt'
            else:
                file_format = 'lines'
        
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(input_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if file_format == 'json':
            data = json.loads(content)
            translated_data = self._translate_json(data, source_lang, target_lang)
            result = {
                'format': 'json',
                'original': data,
                'translated': translated_data
            }
        elif file_format == 'lines':
            # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            lines = [line.strip() for line in content.split('\n') if line.strip()]
            translated_lines = self.translate_text(lines, source_lang, target_lang)
            result = {
                'format': 'lines',
                'original': lines,
                'translated': translated_lines
            }
        else:  # txt - –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
            translated_content = self.translate_text(content, source_lang, target_lang)
            result = {
                'format': 'txt',
                'original': content,
                'translated': translated_content
            }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if output_file:
            self._save_result(output_file, result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        result['metadata'] = {
            'input_file': str(input_path),
            'output_file': output_file,
            'source_lang': source_lang,
            'target_lang': target_lang,
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        }
        
        return result
    
    def _translate_json(self, data: Union[Dict, List], 
                       source_lang: str, target_lang: str) -> Union[Dict, List]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        if isinstance(data, str):
            return self.translate_text(data, source_lang, target_lang)
        elif isinstance(data, list):
            return [self._translate_json(item, source_lang, target_lang) for item in data]
        elif isinstance(data, dict):
            return {key: self._translate_json(value, source_lang, target_lang) 
                   for key, value in data.items()}
        else:
            return data
    
    def _save_result(self, output_file: str, result: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        if result['format'] == 'json':
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(result['translated'], f, ensure_ascii=False, indent=2)
        elif result['format'] == 'lines':
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write('\n'.join(result['translated']))
        else:  # txt
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(result['translated'])


# ============= –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–ò –í CURSOR =============

def ai_translate_file(input_file: str, 
                      output_file: str = None,
                      api_key: str = None) -> Dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ò–ò –≤ Cursor
    
    Args:
        input_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –ò–ò
        output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        api_key: API –∫–ª—é—á DeepL (–µ—Å–ª–∏ –Ω–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        result = ai_translate_file('texts.txt')
        translated_text = result['translated']
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    translator = DeepLFileTranslator(api_key)
    
    # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if not output_file:
        input_path = Path(input_file)
        output_file = f"translated_{input_path.stem}_RU{input_path.suffix}"
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–∞–π–ª
    result = translator.translate_file(
        input_file=input_file,
        output_file=output_file,
        source_lang='EN',
        target_lang='RU'
    )
    
    print(f"‚úì –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"  –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
    print(f"  –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
    print(f"  –§–æ—Ä–º–∞—Ç: {result['format']}")
    
    return result


# ============= –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–®–ï–ì–û WORKFLOW =============

def translate_chapter_with_deepl(english_file: str, output_file: str = None) -> Dict:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–ª–∞–≤ –Ω–æ–≤–µ–ª–ª—ã —á–µ—Ä–µ–∑ DeepL
    
    Args:
        english_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –≥–ª–∞–≤—ã
        output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–ª–∞–≤—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ DeepL API...")
        print(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {english_file}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
        result = ai_translate_file(
            input_file=english_file,
            output_file=output_file
        )
        
        print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω –æ—Ç DeepL!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ
        result['translator'] = 'DeepL API'
        result['translation_date'] = time.strftime('%Y-%m-%d %H:%M:%S')
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —á–µ—Ä–µ–∑ DeepL: {e}")
        raise


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üîß –¢–µ—Å—Ç DeepL –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = "test_chapter.txt"
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write("""Chapter Test: Simple Translation

This is a test chapter for our translation system.
It contains multiple lines and should be translated properly.

"Hello world!" said the character.
"This is a dialogue example," replied another character.

The end of test chapter.""")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥
        result = translate_chapter_with_deepl(test_file, "test_chapter_ru.txt")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:")
        print(f"   –§–æ—Ä–º–∞—Ç: {result['format']}")
        print(f"   –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: {result['translator']}")
        print(f"   –î–∞—Ç–∞: {result['translation_date']}")
        print(f"üìù –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print(result['translated'][:200] + "..." if len(result['translated']) > 200 else result['translated'])
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω API –∫–ª—é—á DeepL:")
        print("   export DEEPL_API_KEY='your-key:fx'")
