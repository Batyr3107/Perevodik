#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–æ–∫ –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º
"""

import sys
import os
from typing import Tuple, List, Dict, Any

def count_lines_and_breaks(text: str) -> Dict[str, Any]:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
    lines = text.split('\n')
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    total_lines = len(lines)
    
    # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    empty_lines = sum(1 for line in lines if not line.strip())
    
    # –°—Ç—Ä–æ–∫–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    content_lines = total_lines - empty_lines
    
    # –ü–µ—Ä–µ–Ω–æ—Å—ã –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Ç–æ—á–∫–æ–π, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º)
    line_breaks = []
    for i, line in enumerate(lines):
        if line.strip() and not line.strip().endswith(('.', '!', '?', '¬ª', '"', "'")):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π
            if i < len(lines) - 1:
                line_breaks.append(i + 1)  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1
    
    # –°—Ç—Ä–æ–∫–∏ —Å —Ç–∏—Ä–µ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
    dash_lines = [i + 1 for i, line in enumerate(lines) if line.strip() == '‚Äî']
    
    return {
        'total_lines': total_lines,
        'empty_lines': empty_lines,
        'content_lines': content_lines,
        'line_breaks': line_breaks,
        'dash_lines': dash_lines,
        'break_count': len(line_breaks)
    }

def check_structure_match(original_text: str, translated_text: str) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
    
    original_stats = count_lines_and_breaks(original_text)
    translated_stats = count_lines_and_breaks(translated_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    structure_match = {
        'total_lines_match': original_stats['total_lines'] == translated_stats['total_lines'],
        'empty_lines_match': original_stats['empty_lines'] == translated_stats['empty_lines'],
        'content_lines_match': original_stats['content_lines'] == translated_stats['content_lines'],
        'break_count_match': original_stats['break_count'] == translated_stats['break_count'],
        'dash_lines_match': original_stats['dash_lines'] == translated_stats['dash_lines']
    }
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    structure_match['overall_match'] = all(structure_match.values())
    
    return {
        'original': original_stats,
        'translated': translated_stats,
        'match': structure_match
    }

def print_structure_report(result: Dict[str, Any]):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –°–¢–†–û–ö")
    print("=" * 50)
    
    original = result['original']
    translated = result['translated']
    match = result['match']
    
    print(f"üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {original['total_lines']}")
    print(f"   ‚Ä¢ –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {original['empty_lines']}")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {original['content_lines']}")
    print(f"   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {original['break_count']}")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ —Å —Ç–∏—Ä–µ: {len(original['dash_lines'])}")
    
    print(f"\nüìÑ –ü–µ—Ä–µ–≤–æ–¥:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {translated['total_lines']}")
    print(f"   ‚Ä¢ –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {translated['empty_lines']}")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {translated['content_lines']}")
    print(f"   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {translated['break_count']}")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ —Å —Ç–∏—Ä–µ: {len(translated['dash_lines'])}")
    
    print(f"\n‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {'‚úÖ' if match['total_lines_match'] else '‚ùå'}")
    print(f"   ‚Ä¢ –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {'‚úÖ' if match['empty_lines_match'] else '‚ùå'}")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {'‚úÖ' if match['content_lines_match'] else '‚ùå'}")
    print(f"   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {'‚úÖ' if match['break_count_match'] else '‚ùå'}")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ —Å —Ç–∏—Ä–µ: {'‚úÖ' if match['dash_lines_match'] else '‚ùå'}")
    
    print(f"\nüèÜ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {'‚úÖ –°–¢–†–£–ö–¢–£–†–ê –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' if match['overall_match'] else '‚ùå –°–¢–†–£–ö–¢–£–†–ê –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
    if not match['overall_match']:
        print(f"\n‚ö†Ô∏è –î–ï–¢–ê–õ–ò –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô:")
        
        if not match['total_lines_match']:
            print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {original['total_lines']} ‚â† {translated['total_lines']}")
        
        if not match['empty_lines_match']:
            print(f"   ‚Ä¢ –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {original['empty_lines']} ‚â† {translated['empty_lines']}")
        
        if not match['content_lines_match']:
            print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {original['content_lines']} ‚â† {translated['content_lines']}")
        
        if not match['break_count_match']:
            print(f"   ‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {original['break_count']} ‚â† {translated['break_count']}")
        
        if not match['dash_lines_match']:
            print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ —Å —Ç–∏—Ä–µ: {len(original['dash_lines'])} ‚â† {len(translated['dash_lines'])}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if original['line_breaks'] or translated['line_breaks']:
        print(f"\nüìã –ü–ï–†–ï–ù–û–°–´ –í–ù–£–¢–†–ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô:")
        print(f"   ‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª: —Å—Ç—Ä–æ–∫–∏ {original['line_breaks']}")
        print(f"   ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥: —Å—Ç—Ä–æ–∫–∏ {translated['line_breaks']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–∏—Ä–µ
    if original['dash_lines'] or translated['dash_lines']:
        print(f"\nüìã –°–¢–†–û–ö–ò –° –¢–ò–†–ï:")
        print(f"   ‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª: —Å—Ç—Ä–æ–∫–∏ {original['dash_lines']}")
        print(f"   ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥: —Å—Ç—Ä–æ–∫–∏ {translated['dash_lines']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python structure_checker.py <–æ—Ä–∏–≥–∏–Ω–∞–ª> <–ø–µ—Ä–µ–≤–æ–¥>")
        print("–ü—Ä–∏–º–µ—Ä: python structure_checker.py original/–ì–ª–∞–≤–∞\\ 10 translated/–ì–ª–∞–≤–∞\\ 10-ru.txt")
        return
    
    original_file = sys.argv[1]
    translated_file = sys.argv[2]
    
    if not os.path.exists(original_file):
        print(f"‚ùå –§–∞–π–ª –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {original_file}")
        return
    
    if not os.path.exists(translated_file):
        print(f"‚ùå –§–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {translated_file}")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
        with open(original_file, 'r', encoding='utf-8') as f:
            original_text = f.read()
        
        with open(translated_file, 'r', encoding='utf-8') as f:
            translated_text = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        result = check_structure_match(original_text, translated_text)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print_structure_report(result)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
